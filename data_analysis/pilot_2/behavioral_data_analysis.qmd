---
title: "Reduced SR in AUD Pilot 2: Behavioral Data Analysis"
author: "Milena Musial"
date: 06.06.2024
format: html
editor: visual
toc: TRUE
code-fold: true
embed-resources: true
execute: 
  warning: false

---

```{r}
# Set up

rm(list = ls(all = TRUE))

# Load packages
packages <- c("ggplot2", "dplyr", "tidyr", "kableExtra", "gmodels", "lme4", "sjPlot")
#install.packages(packages)
lapply(packages, library, character.only = TRUE)

# define paths
data_path <- "C:/Users/musialm/OneDrive - Charité - Universitätsmedizin Berlin/PhD/04_B01/WP3/WP3_DATA/PILOT_2/behavioral_data"
demo_path <- "C:/Users/musialm/OneDrive - Charité - Universitätsmedizin Berlin/PhD/04_B01/WP3/WP3_DATA/PILOT_2/demo_data"

# read dfs
load(file.path(data_path, "pilot_data_complete.RData"))
load(file.path(demo_path, "demo_psych_data.RData"))
```

# Learning Phase

## Percent correct overall

```{r}
learning_correct_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(phase) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            ) 

learning_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 24,
                latex_options = "scale_down")
```

## Percent correct per component (and state)

```{r}
learning_correct_component_state_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(component, state) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            ) %>%
  mutate(state=as.factor(state))

learning_correct_component_state_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")

```

```{r}
# bar plot
ggplot(learning_correct_component_state_df, aes(x=component, y=mean_correct, fill=state)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  theme_light() +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen'))

```

### LogReg: Difference from control condition

```{r}
logreg_learning_correct_condition_df <- trial_df %>%
  filter(phase == "learning") %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition)) %>%
  select(ID,
         correct,
         condition)

contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(5, base = 1)

log_model_learning_control <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")

tab_model(log_model_learning_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from goal-state condition

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(5, base = 2)

log_model_learning_goalstate <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from policy condition

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(5, base = 3)

log_model_learning_reward <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from reward condition

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(5, base = 4)

log_model_learning_transition <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from transition condition

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(5, base = 5)

log_model_learning_transition <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Percent correct paths per component

```{r}
learning_correct_path_component_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(component) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_path_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_correct_path_component_df, aes(x=component, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  theme_light() +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light()

```

## Time effects

### Percent correct all states per component over time

```{r}
# get percent correct over time
learning_correct_component_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  mutate(time_bin = cut(
    trial,
    breaks = 4,
    labels = c("T1", "T2", "T3", "T4")
    )
  ) %>%
  group_by(component, time_bin) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_component_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
ggplot(learning_correct_component_time_df, aes(x=component, y=mean_correct, fill=time_bin)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```

### Percent correct state 1 over time

```{r}
# get percent correct over time
learning_state1_correct_component_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number()
         ) %>%
  group_by(condition, accumulated_state1_visits) %>%
  summarise(mean_correct_state_1 = mean(correct_state_1, na.rm = TRUE),
            se_correct_state_1 = sd(correct_state_1, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_1, na.rm=TRUE)[2],
            ci_u = ci(correct_state_1, na.rm=TRUE)[3],
            n = n()
            )

learning_state1_correct_component_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot state 1
ggplot(learning_state1_correct_component_time_df, aes(x=accumulated_state1_visits, y=mean_correct_state_1, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

### Percent correct state 2 over time

```{r}
# get percent correct over time
learning_state2_correct_component_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(2)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state2_visits = row_number()
         ) %>%
  group_by(condition, accumulated_state2_visits) %>%
  summarise(mean_correct_state_2 = mean(correct_state_2, na.rm = TRUE),
            se_correct_state_2 = sd(correct_state_2, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_2, na.rm=TRUE)[2],
            ci_u = ci(correct_state_2, na.rm=TRUE)[3],
            n = n()
            )

learning_state2_correct_component_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot state 1
ggplot(learning_state2_correct_component_time_df, aes(x=accumulated_state2_visits, y=mean_correct_state_2, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

### Percent correct state 3 over time

```{r}
# get percent correct over time
learning_state3_correct_component_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(3)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state3_visits = row_number()
         ) %>%
  group_by(condition, accumulated_state3_visits) %>%
  summarise(mean_correct_state_3 = mean(correct_state_3, na.rm = TRUE),
            se_correct_state_3 = sd(correct_state_3, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_3, na.rm=TRUE)[2],
            ci_u = ci(correct_state_3, na.rm=TRUE)[3],
            n = n()
            )

learning_state3_correct_component_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot state 1
ggplot(learning_state3_correct_component_time_df, aes(x=accumulated_state3_visits, y=mean_correct_state_3, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

## Rule out confounding variables / alternative explanations

### Percent correct all states per condition index

```{r}
# get percent correct over time
learning_correct_component_index_df <- trial_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(component, condition_index) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_component_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_correct_component_index_df, aes(x=condition_index, y=mean_correct, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

### Percent correct all states per environment

```{r}
# get percent correct over time
learning_correct_component_environment_df <- trial_df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(component, environment) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_correct_component_environment_df, aes(x=environment, y=mean_correct, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

### Balancing check: variations

```{r}
# get percent correct over time
balancing_variations_df <- component_df %>%
  filter(component == "control-learning"
         ) %>%
  group_by(variation) %>%
  summarise(n = n()
            )

balancing_variations_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

### Balancing check: Condition index per condition

```{r}
# get percent correct over time
balancing_index_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(component, condition_index) %>%
  summarise(n = n()
            )

balancing_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

### Balancing check: Condition index per environment

```{r}
# get percent correct over time
balancing_environment_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(condition_index, environment) %>%
  summarise(n = n()
            )

balancing_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Relation to clinical measures: percent correct paths

```{r}
# learning_correct_path_ID_df <- trial_df %>%
#   filter(phase == "learning",
#          state %in% c(1)
#          ) %>%
#   group_by(ID) %>%
#   summarise(mean_correct = mean(correct_path, na.rm = TRUE),
#             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
#             ci_l = ci(correct_path, na.rm=TRUE)[2],
#             ci_u = ci(correct_path, na.rm=TRUE)[3],
#             n = n()
#             )
# 
# clinical_learning_correct_path_ID_df <- merge(learning_correct_path_ID_df, demo_psych_df, by = "ID")
```

### AUDIT score 

```{r}
# # bar plot
# ggplot(clinical_learning_correct_path_ID_df, aes(x=audit_sum, y=mean_correct)) +
#   geom_point() +
#   geom_smooth() +
#   theme_light() +
#   theme_light()

```

## AUD criteria 

```{r}
# # box plot
# ggplot(clinical_learning_correct_path_ID_df, aes(x=aud_sum, y=mean_correct)) +
#   geom_boxplot(fill = "lightblue") +
#   theme_light() +
#   theme_light()
```

## Inclusion / Exclusion

### Criterion: \>2 correct choices in each of last 4 state 1,2,3 visits

```{r}
# get last 4 choices per state
learning_state1_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 1) %>%
  group_by(ID, component) %>%
  slice_tail(n=4)

learning_state2_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 2) %>%
  group_by(ID, component) %>%
  slice_tail(n=4)

learning_state3_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 3) %>%
  group_by(ID, component) %>%
  slice_tail(n=4)

# who does not pass state 1 criterion
learning_state1_last4_correct_component_df <- learning_state1_last4_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_state_1))

learning_state1_last4_correct_component_df_excl <- learning_state1_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 2 criterion
learning_state2_last4_correct_component_df <- learning_state2_last4_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_state_2))

learning_state2_last4_correct_component_df_excl <- learning_state2_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 3 criterion
learning_state3_last4_correct_component_df <- learning_state3_last4_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_state_3))

learning_state3_last4_correct_component_df_excl <- learning_state3_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# excluded components
learning_last4_correct_component_df_excl <- rbind(learning_state1_last4_correct_component_df_excl,
                                          learning_state2_last4_correct_component_df_excl,
                                          learning_state3_last4_correct_component_df_excl)

learning_last4_correct_component_df_excl <- learning_last4_correct_component_df_excl %>%
  select(! sum_correct) %>%
  distinct()

excluded_components_a <- learning_last4_correct_component_df_excl$ID_condition_combo

percent_component_excluded_a <- length(excluded_components_a)/nrow(learning_state1_last4_correct_component_df)

# excluded subjects
excluded_IDs_a <- unique(learning_last4_correct_component_df_excl$ID)

percent_IDs_excluded_a <- length(excluded_IDs_a)/length(unique(trial_df$ID))
```

-   \% excluded components

```{r}
percent_component_excluded_a
```

-   \% excluded IDs

```{r}
percent_IDs_excluded_a
```

#### Excluded components per condition

```{r}
learning_last4_correct_condition_df_excl <- learning_last4_correct_component_df_excl %>%
  group_by(condition) %>%
  summarise(n = n()
            )
  
learning_last4_correct_condition_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

#### Excluded components per component index

```{r}
learning_last4_correct_component_index_df_excl <- learning_last4_correct_component_df_excl %>%
  group_by(condition_index) %>%
  summarise(n = n()
            )
  
learning_last4_correct_component_index_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

#### Excluded components per environment

```{r}
learning_last4_correct_component_environment_df_excl <- learning_last4_correct_component_df_excl %>%
  group_by(environment) %>%
  summarise(n = n()
            )
  
learning_last4_correct_component_environment_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Alternative criterion: \>= 75% correct during learning overall

```{r}
# get choices per state
learning_state1_df <- trial_df %>%
  filter(phase == "learning",
         state == 1)

learning_state2_df <- trial_df %>%
  filter(phase == "learning",
         state == 2)

learning_state3_df <- trial_df %>%
  filter(phase == "learning",
         state == 3)

# who does not pass state 1 criterion
learning_state1_correct_component_df <- learning_state1_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(mean_correct = mean(correct_state_1))

learning_state1_correct_component_df_excl <- learning_state1_correct_component_df %>% 
  filter(mean_correct < 0.65) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 2 criterion
learning_state2_correct_component_df <- learning_state2_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(mean_correct = mean(correct_state_2))

learning_state2_correct_component_df_excl <- learning_state2_correct_component_df %>% 
  filter(mean_correct < 0.65) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 3 criterion
learning_state3_correct_component_df <- learning_state3_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(mean_correct = mean(correct_state_3))

learning_state3_correct_component_df_excl <- learning_state3_correct_component_df %>% 
  filter(mean_correct < 0.65) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# excluded components
learning_correct_component_df_excl <- rbind(learning_state1_correct_component_df_excl,
                                          learning_state2_correct_component_df_excl,
                                          learning_state3_correct_component_df_excl)

learning_correct_component_df_excl <- learning_correct_component_df_excl %>%
  select(! mean_correct) %>%
  distinct()

excluded_components_b <- learning_correct_component_df_excl$ID_condition_combo

percent_component_excluded_b <- length(excluded_components_b)/nrow(learning_state1_correct_component_df)

# how many subjects don't pass criterion in at least one condition
excluded_IDs_b <- unique(learning_correct_component_df_excl$ID)

percent_IDs_excluded_b <- length(excluded_IDs_b)/length(unique(trial_df$ID))
```

-   \% excluded components

```{r}
percent_component_excluded_b
```

-   \% excluded IDs

```{r}
percent_IDs_excluded_b
```

#### Excluded components per condition

```{r}
learning_correct_condition_df_excl <- learning_correct_component_df_excl %>%
  group_by(condition) %>%
  summarise(n = n()
            )
  
learning_correct_condition_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

#### Excluded components per component index

```{r}
learning_correct_component_index_df_excl <- learning_correct_component_df_excl %>%
  group_by(condition_index) %>%
  summarise(n = n()
            )
  
learning_correct_component_index_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

#### Excluded components per environment

```{r}
learning_correct_component_environment_df_excl <- learning_correct_component_df_excl %>%
  group_by(environment) %>%
  summarise(n = n()
            )
  
learning_correct_component_environment_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Final exclusion

```{r}
################ CHOOSE EXCLUSION CRITERION ####################################
################################################################################

excluded_components <- excluded_components_b # a or b
excluded_IDs <- excluded_IDs_b # a or b
```

```{r}
# # Exclude components from all dfs
# trial_df_excl <- trial_df %>%
#   mutate(ID_condition_combo = paste(ID, "-", condition, sep="")) %>%
#   filter(! ID_condition_combo %in% excluded_components)
# 
# component_df_excl <- component_df %>%
#   mutate(ID_condition_combo = paste(ID, "-", condition, sep="")) %>%
#   filter(! ID_condition_combo %in% excluded_components)
```

```{r}
# OR Exclude IDs from all dfs
trial_df_excl <- trial_df %>%
  filter(! ID %in% excluded_IDs)

component_df_excl <- component_df %>%
  filter(! ID %in% excluded_IDs)

rating_df_excl <- rating_df %>%
  filter(! ID %in% excluded_IDs)
```

```{r}
################ DF DEFINITION FOR RELEARNING & TEST ########################
#############################################################################

df <- trial_df_excl # trial_df, trial_df_excl

```

-   Further analyses based on n =

```{r}
length(unique(df$ID))
```

# Test Phase

## State 1

### State 1 switches in all 5 test trials per component

```{r}
test_switch_component_df <- df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(component) %>%
  summarise(n = n(),
            sum_switch = sum(switch, na.rm=T),
            percent_switch = mean(switch, na.rm=T),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

test_switch_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_switch_component_df, aes(x=component, y=percent_switch)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-0.2, 1)) +
  theme_light()
```

### State 1 % switches across 5 test trials per component

```{r}
test_switch_ID_component_df <- df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(ID, component) %>%
  summarise(n = n(),
            sum_switch = sum(switch, na.rm=T),
            percent_switch = mean(switch, na.rm=T),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

test_switch_ID_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_switch_ID_component_df, aes(x=component, y=percent_switch)) +
  geom_boxplot(fill="lightblue") +
  scale_y_continuous(labels = scales::comma) +
  theme_light()
```

### State 1 switches in first test trial per component

```{r}
test_switch_component_trial1_df <- df %>%
  filter(phase == "test",
         trial == 1,
         state == 1) %>%
  group_by(component) %>%
  summarise(n = n(),
            sum_switch = sum(switch, na.rm=T),
            percent_switch = mean(switch, na.rm=T),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

test_switch_component_trial1_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_switch_component_trial1_df, aes(x=component, y=percent_switch)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-0.2, 1)) +
  theme_light()
```

### State 1 switches per trial per component

```{r}
test_switch_component_trial_df <- df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(component, trial) %>%
  summarise(n = n(),
            sum_switch = sum(switch, na.rm=T),
            percent_switch = mean(switch, na.rm=T),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

test_switch_component_trial_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# line plot state 1
ggplot(test_switch_component_trial_df, aes(x=trial, y=percent_switch, fill=component)) +
  geom_line(aes(color=component), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

## Correct paths starting from state 1

```{r}
test_correct_path_component_df <- trial_df %>%
  filter(phase == "test",
         state %in% c(1)
         ) %>%
  group_by(component) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

test_correct_path_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_correct_path_component_df, aes(x=component, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  theme_light() +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light()

```

## Statistical tests

### LogReg: Difference from control condition {.smaller}

```{r}
logreg_test_switch_condition_df <- df %>%
  filter(phase == "test") %>%
  mutate(switch = as.factor(switch),
         condition = as.factor(condition)) %>%
  select(ID,
         switch,
         condition)

contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(5, base = 1)

log_model_control <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from goal-state condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(5, base = 2)

log_model_goalstate <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from policy condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(5, base = 3)

log_model_reward <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from reward condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(5, base = 4)

log_model_transition <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from transition condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(5, base = 5)

log_model_transition <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Rule out confounding variables / alternative explanations

### Switches per condition index

```{r}
# get percent correct over time
test_switch_component_index_df <- df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "test"
         ) %>%
  group_by(component, condition_index) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3],
            n = n()
            )

test_switch_component_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_switch_component_index_df, aes(x=condition_index, y=mean_switch, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-2, 3)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

### Time on task \* condition (changes in strategy over time)

#### LogReg: Switches per accumulated state visits on task \* difference from control

-   condition effects on switch don't interact with time on task (no changes in strategy)

```{r}
logreg_test_switch_condition_accumulatedtrial_df <- df %>%
  filter(phase == "test") %>%
  mutate(switch = as.factor(switch),
         condition = as.factor(condition)) %>%
  select(ID,
         switch,
         condition,
         accumulated_states_visited)

contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 1)

log_model_accumulated_states_visited_control <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")

tab_model(log_model_accumulated_states_visited_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from goal-state

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 2)

log_model_accumulated_states_visited_goalstate <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from policy

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 3)

log_model_accumulated_states_visited_reward <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from reward

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 4)

log_model_accumulated_states_visited_transition <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from transition

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 5)

log_model_accumulated_states_visited_transition <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

### Switches per environment

```{r}
# get percent correct over time
test_switch_component_environment_df <- df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "test"
         ) %>%
  group_by(component, environment) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3],
            n = n())

test_switch_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_switch_component_environment_df, aes(x=environment, y=mean_switch, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-2, 2.5)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

## Relation to clinical measures

```{r}
# test_correct_component_trial1_ID_df <- df %>%
#   filter(phase == "test",
#          state == 1) %>%
#   group_by(component, ID) %>%
#   summarise(n = n(),
#             sum_correct = sum(correct, na.rm=T),
#             percent_correct = mean(correct, na.rm=T),
#             ci_l = ci(correct, na.rm=TRUE)[2],
#             ci_u = ci(correct, na.rm=TRUE)[3]
#             )
# 
# 
# clinical_test_correct_component_trial1_ID_df <- merge(test_switch_component_trial1_ID_df, demo_psych_df, by = "ID")
```
### AUDIT score 

```{r}
# # bar plot
# ggplot(clinical_test_switch_component_trial1_ID_df, aes(x=audit_sum, y=percent_correct)) +
#   geom_point() +
#   geom_smooth() +
#   theme_light() +
#   theme_light()

```

### AUD criteria 

```{r}
# # box plot
# ggplot(clinical_test_switch_component_trial1_ID_df, aes(x=aud_sum, y=percent_correct)) +
#   geom_boxplot(fill = "lightblue") +
#   theme_light() +
#   theme_light()
```

# Rating phase

## Rating difference optimal - suboptimal action state 1

```{r}
rating_state1_component_df <- rating_df %>%
  filter(state == 1) %>%
  group_by(component) %>%
  summarise(n = n(),
            mean_rating_diff = mean(rating_diff_state1, na.rm=T),
            se_rating_diff = sd(rating_diff_state1, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(rating_diff_state1, na.rm=TRUE)[2],
            ci_u = ci(rating_diff_state1, na.rm=TRUE)[3]
            )

rating_state1_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(rating_state1_component_df, aes(x=component, y=mean_rating_diff)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-75, 75)) +
  theme_light()
```

### Relation to test choices

```{r}
test_state1_df <- df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(ID, condition) %>%
  summarise(percent_correct = mean(correct))

rating_diff_state1_df <- rating_df %>%
  filter(state == 1) %>%
  group_by(ID, condition) %>%
  summarise(rating_diff = sum(rating_diff, na.rm=T))

test_rating_state1_df <- merge(test_state1_df, rating_diff_state1_df, by = c("ID", "condition"))
```

```{r}
# scatter plot
ggplot(test_rating_state1_df, aes(x=percent_correct, y=rating_diff)) +
  geom_point() +
  geom_smooth() +
  theme_light()
```

## Rating difference optimal - suboptimal action state 2

```{r}
rating_state2_component_df <- rating_df %>%
  filter(state == 2) %>%
  group_by(component) %>%
  summarise(n = n(),
            mean_rating_diff = mean(rating_diff_state2, na.rm=T),
            se_rating_diff = sd(rating_diff_state2, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(rating_diff_state2, na.rm=TRUE)[2],
            ci_u = ci(rating_diff_state2, na.rm=TRUE)[3]
            )

rating_state2_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(rating_state2_component_df, aes(x=component, y=mean_rating_diff)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-100, 100)) +
  theme_light()
```

### Relation to test choices

```{r}
test_state2_df <- df %>%
  filter(phase == "test",
         state == 2) %>%
  group_by(ID, condition) %>%
  summarise(percent_correct = mean(correct))

rating_diff_state2_df <- rating_df %>%
  filter(state == 2) %>%
  group_by(ID, condition) %>%
  summarise(rating_diff = sum(rating_diff, na.rm=T))

test_rating_state2_df <- merge(test_state2_df, rating_diff_state2_df, by = c("ID", "condition"))
```

```{r}
# scatter plot
ggplot(test_rating_state2_df, aes(x=percent_correct, y=rating_diff)) +
  geom_point() +
  geom_smooth() +
  theme_light()
```

## Rating difference optimal - suboptimal action state 3

```{r}
rating_state3_component_df <- rating_df %>%
  filter(state == 3) %>%
  group_by(component) %>%
  summarise(n = n(),
            mean_rating_diff = mean(rating_diff_state3, na.rm=T),
            se_rating_diff = sd(rating_diff_state3, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(rating_diff_state3, na.rm=TRUE)[2],
            ci_u = ci(rating_diff_state3, na.rm=TRUE)[3]
            )

rating_state3_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(rating_state3_component_df, aes(x=component, y=mean_rating_diff)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-100, 100)) +
  theme_light()
```

### Relation to test choices

```{r}
test_state3_df <- df %>%
  filter(phase == "test",
         state == 3) %>%
  group_by(ID, condition) %>%
  summarise(percent_correct = mean(correct))

rating_diff_state3_df <- rating_df %>%
  filter(state == 3) %>%
  group_by(ID, condition) %>%
  summarise(rating_diff = sum(rating_diff, na.rm=T))

test_rating_state3_df <- merge(test_state3_df, rating_diff_state3_df, by = c("ID", "condition"))
```

```{r}
# scatter plot
ggplot(test_rating_state3_df, aes(x=percent_correct, y=rating_diff)) +
  geom_point() +
  geom_smooth() +
  theme_light()
```

# Reaction times

## RT per condition and phase

```{r}
RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "control-test",
                          "reward-learning",
                          "reward-relearning",
                          "reward-test",
                          "transition-learning",
                          "transition-relearning",
                          "transition-test",
                          "policy-learning",
                          "policy-relearning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-relearning",
                          "goal-state-test")) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
ggplot(df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

## 2-choice states

### RT in 2-choice states per condition and phase

```{r}
twochoice_RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3)) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

twochoice_RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
twochoice_RT_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3))

ggplot(twochoice_RT_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

### RT in state 1 per condition and phase

```{r}
state1_RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1)) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

state1_RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
state1_RT_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1))

ggplot(state1_RT_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

### Relation RT - correct

#### Learning RT in 2-choice states - correct choice

```{r}
learning_twochoice_RT_condition_phase_correct_df <- df %>%
  filter(component %in% c("control-learning",
                          "reward-learning",
                          "transition-learning",
                          "goal-state-learning"),
         state %in% c(1,2,3)) %>%
  group_by(condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

learning_twochoice_RT_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
learning_twochoice_RT_df <- df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-learning",
                          "reward-learning",
                          "transition-learning",
                          "goal-state-learning",
                          "policy-learning"),
         state %in% c(1,2,3))

ggplot(learning_twochoice_RT_df, aes(x=phase, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

#### Learning RT in 2-choice states - correct choice

```{r}
learning_state1_RT_condition_phase_correct_df <- df %>%
  filter(component %in% c("control-learning",
                          "reward-learning",
                          "transition-learning",
                          "goal-state-learning"),
         state %in% c(1)) %>%
  group_by(condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

learning_state1_RT_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
learning_state1_RT_df <- df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-learning",
                          "reward-learning",
                          "transition-learning",
                          "goal-state-learning",
                          "policy-learning"),
         state %in% c(1,2,3))

ggplot(learning_state1_RT_df, aes(x=phase, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

#### Test RT in 2-choice states - correct choice

```{r}
test_RT_condition_phase_correct_df <- df %>%
  filter(component %in% c("control-test",
                          "reward-test",
                          "transition-test",
                          "goal-state-test",
                          "policy-test")
         ) %>%
  group_by(condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

test_RT_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
test_RT_df <- df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-test",
                          "reward-test",
                          "transition-test",
                          "policy-test",
                          "goal-state-test"))

ggplot(test_RT_df, aes(x=condition, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

#### Test RT state 1 - correct choice

```{r}
test_state1_RT_condition_phase_correct_df <- df %>%
  filter(component %in% c("control-test",
                          "reward-test",
                          "transition-test",
                          "goal-state-test",
                          "policy-test"),
         state %in% c(1)) %>%
  group_by(condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

test_state1_RT_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
test_state1_RT_df <- df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-test",
                          "reward-test",
                          "transition-test",
                          "policy-test",
                          "goal-state-test"),
         state %in% c(1))

ggplot(test_state1_RT_df, aes(x=condition, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

## 1-choice states

### RT in 1-choice states per condition and phase

```{r}
onechoice_RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "reward-learning",
                          "reward-relearning",
                          "transition-learning",
                          "transition-relearning",
                          "policy-learning",
                          "policy-relearning",
                          "goal-state-learning",
                          "goal-state-relearning"),
         state %in% c(4,5,6,7,8,9,10)) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

onechoice_RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
onechoice_RT_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "reward-learning",
                          "reward-relearning",
                          "transition-learning",
                          "transition-relearning",
                          "policy-learning",
                          "policy-relearning",
                          "goal-state-learning",
                          "goal-state-relearning"),
         state %in% c(4,5,6,7,8,9,10))

ggplot(onechoice_RT_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```
