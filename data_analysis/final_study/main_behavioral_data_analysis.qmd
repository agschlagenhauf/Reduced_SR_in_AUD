---
title: "Reduced SR in AUD Pilot 3: Behavioral Data Analysis"
author: "Milena Musial"
date: 10.07.2024
format: html
editor: visual
toc: TRUE
code-fold: true
embed-resources: true
execute: 
  warning: false
editor_options: 
  chunk_output_type: inline
---

```{r}
# Set up

rm(list = ls(all = TRUE))

# Load packages
packages <- c("ggplot2", "dplyr", "tidyr", "kableExtra", "gmodels", "lme4", "sjPlot")
#install.packages(packages)
sapply(packages, require, character.only = TRUE)

# define paths
data_path <- "/Users/milenamusial/Library/CloudStorage/OneDrive-Charité-UniversitätsmedizinBerlin/PhD/04_B01/WP3/WP3_DATA/FINAL_STUDY"

# read dfs
load(file.path(data_path, "final_data_complete.RData"))
```

# Exclusion

## Complete sample

```{r}
summary <- trial_df %>%
  select(ID, group, version)

summary <- unique(summary) 

summary <- summary %>%
  group_by(group, version) %>%
  summarise(n = n())

summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Inconsistent AUDIT scores

```{r}
audit_inconsistent_df <- trial_df %>%
  select(ID, group, version, audit_pre, audit_post) %>%
  distinct() %>%
  mutate(audit_consistent = ifelse(((audit_pre > 7 & audit_post > 7) | (audit_pre < 8 & audit_post < 8)), 1, 0)) %>%
  filter(audit_consistent == 0) %>%
  arrange(group, version)
```

### Excluded subjects per group and version

```{r}
audit_inconsistent_df_summary <- audit_inconsistent_df %>%
  group_by(group, version) %>%
  summarise(n = n())

audit_inconsistent_df_summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Apply exclusion

```{r}
trial_df <- trial_df %>%
  filter(! ID %in% audit_inconsistent_df$ID)

component_df <- component_df %>%
  filter(! ID %in% audit_inconsistent_df$ID)

rating_df <- rating_df %>%
  filter(! ID %in% audit_inconsistent_df$ID)
```

## Correct path taken in less than 3 out of the last 5 learning phase trials in any of the 5 conditions

```{r}
# get last paths
learning_paths_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 1) %>%
  group_by(ID, component) %>%
  slice_tail(n=5)

# who does not pass criterion
learning_paths_last4_correct_component_df <- learning_paths_last4_df %>%
  group_by(ID, group, version, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_path))

learning_paths_last4_correct_component_df_excl <- learning_paths_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# excluded components
learning_paths_last4_correct_component_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  select(! sum_correct) %>%
  distinct()

excluded_components <- learning_paths_last4_correct_component_df_excl$ID_condition_combo

percent_component_excluded <- length(excluded_components)/nrow(learning_paths_last4_correct_component_df)

# excluded subjects
excluded_IDs <- unique(learning_paths_last4_correct_component_df_excl$ID)

percent_IDs_excluded <- length(excluded_IDs)/length(unique(trial_df$ID))
```

### Percent excluded

-   \% excluded components

```{r}
percent_component_excluded
```

-   \% excluded IDs

```{r}
percent_IDs_excluded
```

### Excluded participants per group and version

```{r}
learning_paths_last4_correct_subject_df_excl_summary <- learning_paths_last4_correct_component_df_excl %>%
  ungroup() %>%
  select(ID, group, version) %>%
  distinct() %>%
  group_by(group, version) %>%
  summarise(n = n())

learning_paths_last4_correct_subject_df_excl_summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per group and version

```{r}
learning_correct_group_version_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(group, version) %>%
  summarise(n = n()
            )
  
learning_correct_group_version_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per condition

```{r}
learning_correct_condition_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(condition) %>%
  summarise(n = n()
            )
  
learning_correct_condition_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per component index

```{r}
learning_correct_component_index_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(condition_index) %>%
  summarise(n = n()
            )
  
learning_correct_component_index_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per environment

```{r}
learning_correct_component_environment_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(environment) %>%
  summarise(n = n()
            )
  
learning_correct_component_environment_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Apply exclusion

```{r}
trial_df <- trial_df %>%
  filter(! ID %in% excluded_IDs)

component_df <- component_df %>%
  filter(! ID %in% excluded_IDs)

rating_df <- rating_df %>%
  filter(! ID %in% excluded_IDs)
```

## Correct rating version

### Excluded participants per group and version

```{r}
rating_df_excl <- rating_df %>%
  filter(rating_version == "old",
         complete.cases(rating_diff_state1)) %>%
  select(ID, group, version) %>%
  distinct() %>%
  group_by(group, version) %>%
  summarise(n = n())

rating_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Apply exclusion to rating df

```{r}
# Filter participants with valid rating score and get rid of NA rows (only one reting diff score per participant)
rating_df <- rating_df %>%
  filter(rating_version == "new",
         complete.cases(rating_diff_state1))

# save dfs
save(trial_df, rating_df, component_df, file = file.path(data_path, "final_data_included.RData"))
```

### Further learning & test analyses based on

```{r}
summary <- trial_df %>%
  select(ID, group, version)

summary <- unique(summary) 

summary <- summary %>%
  group_by(group, version) %>%
  summarise(n = n())

summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Further rating analyses based on

```{r}
summary <- rating_df %>%
  select(ID, group, version)

summary <- unique(summary) 

summary <- summary %>%
  group_by(group, version) %>%
  summarise(n = n())

summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

# AUDIT scores

```{r}
audit_df <- trial_df %>%
  select(ID, group, version, audit_pre, audit_post) %>%
  distinct() %>%
  mutate(audit_pre = as.numeric(audit_pre),
         audit_post = as.numeric(audit_post)) %>%
  rowwise() %>%
  mutate(audit_mean = mean(c(audit_pre, audit_post)))

audit_df_summary <- audit_df %>%
  group_by(group, version) %>%
  summarise(mean_audit = mean(audit_mean, na.rm = TRUE),
            se_audit = sd(audit_mean, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(audit_mean, na.rm=TRUE)[2],
            ci_u = ci(audit_mean, na.rm=TRUE)[3],
            n = n()
            ) 

audit_df_summary %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")
```

```{r}
ggplot(audit_df, aes(x=group, y=audit_mean)) +
  geom_boxplot(fill = 'lightblue') +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ version) +
  theme_light(base_size = 16)
```

# Learning Phase

## Percent correct choices across states 1, 2, 3 across conditions

Is % correct during learning across conditions different between groups and versions?

```{r}
learning_correct_group_version_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(group, version) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            ) 

learning_correct_group_version_df %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")
```

### LogReg: group \* versions

-   No differences in %correct during learning btw. groups and versions

```{r}
logreg_learning_correct_group_version_df <- trial_df %>%
  filter(phase == "learning") %>%
  mutate(correct = as.factor(correct),
         group = as.factor(group),
         version = as.factor(version)) %>%
  select(ID,
         correct,
         group,
         version)

contrasts(logreg_learning_correct_group_version_df$version) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_group_version_df$group) <- contr.treatment(2, base = 2)

log_model_learning_correct_allconditions <- glmer(correct ~ group*version + (1 | ID), data = logreg_learning_correct_group_version_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_correct_allconditions, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Main analysis: Percent correct paths from state 1 per component

Is % correct paths starting from state 1 different between groups, versions, and conditions?

```{r}
learning_correct_path_group_version_condition_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_path_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_correct_path_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct paths", limits = c(0, 1.1)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

### LogReg: Difference from control condition

-   Higher % correct during learning in policy and reward compared to control condition

```{r}
logreg_learning_correct_paths_group_version_condition_df <- trial_df %>%
  filter(phase == "learning",
         state == 1
         ) %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition),
         group = as.factor(group),
         version = as.factor(version)) %>%
  select(ID,
         correct_path,
         condition,
         group,
         version)

contrasts(logreg_learning_correct_paths_group_version_condition_df$group) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_paths_group_version_condition_df$version) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 1)

log_model_learning_paths_control <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_paths_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from goal-state condition

-   Higher % correct in alcohol compared to control version
-   Higher % correct in policy and reward compared to goal-state version
-   Effect of policy condition stronger in low-risk group and in control task version

```{r}
contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 2)

log_model_learning_paths_goalstate <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_paths_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from policy condition

-   Lower % correct in all conditions compared to policy condition
-   Effect of goal-state condition stronger in low-risk group and control task version

```{r}
contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 3)

log_model_learning_paths_policy <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_paths_policy, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from reward condition

-   Lower % correct in control, goal-state conditions and higher % correct in policy condition compared to reward condition

```{r}
contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 4)

log_model_learning_paths_reward <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_paths_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from transition condition

-   Higher % correct in policy condition compared to transition condition

```{r}
contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 5)

log_model_learning_paths_transition <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_paths_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Exploratory analysis 1: Percent correct choices across states 1, 2, 3 per component

Is % correct across all states different between groups, versions, and conditions?

```{r}
learning_correct_group_version_condition_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")

```

```{r}
# bar plot
ggplot(learning_correct_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill='lightblue') +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct", limits = c(0, 1.1)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
  
```

### LogReg: Difference from control condition

```{r}
# logreg_learning_correct_group_version_condition_df <- trial_df %>%
#   filter(phase == "learning") %>%
#   mutate(correct = as.factor(correct),
#          group = as.factor(group),
#          condition = as.factor(condition),
#          version = as.factor(version)) %>%
#   select(ID,
#          correct,
#          condition,
#          group,
#          version)
# 
# contrasts(logreg_learning_correct_group_version_condition_df$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_group_version_condition_df$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_group_version_condition_df$condition) <- contr.treatment(5, base = 1)
# 
# log_model_learning_correct_control <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from goal-state condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_df$condition) <- contr.treatment(5, base = 2)
# 
# log_model_learning_correct_goalstate <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from policy condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_df$condition) <- contr.treatment(5, base = 3)
# 
# log_model_learning_correct_policy <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_policy, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from reward condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_df$condition) <- contr.treatment(5, base = 4)
# 
# log_model_learning_correct_reward <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from transition condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_df$condition) <- contr.treatment(5, base = 5)
# 
# log_model_learning_correct_transition <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Exploratory analysis 2: Percent correct choices from state 1 per component

Is % correct in just state 1 different between groups, versions, and conditions?

```{r}
learning_correct_state1_group_version_condition_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_state1_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")

```

```{r}
# bar plot
ggplot(learning_correct_state1_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill='lightblue') +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct", limits = c(0, 1.1)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
  
```

### LogReg: Difference from control condition

```{r}
# logreg_learning_correct_state1_group_version_condition_df <- trial_df %>%
#   filter(phase == "learning") %>%
#   mutate(correct = as.factor(correct),
#          group = as.factor(group),
#          condition = as.factor(condition),
#          version = as.factor(version)) %>%
#   select(ID,
#          correct,
#          condition,
#          group,
#          version)
# 
# contrasts(logreg_learning_correct_state1_group_version_condition_df$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_state1_group_version_condition_df$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_state1_group_version_condition_df$condition) <- contr.treatment(5, base = 1)
# 
# log_model_learning_correct_state1_control <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_state1_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_state1_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from goal-state condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_df$condition) <- contr.treatment(5, base = 2)
# 
# log_model_learning_correct_state1_goalstate <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_state1_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_state1_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from policy condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_df$condition) <- contr.treatment(5, base = 3)
# 
# log_model_learning_correct_state1_reward <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_state1_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_state1_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from reward condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_df$condition) <- contr.treatment(5, base = 4)
# 
# log_model_learning_correct_state1_reward <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_state1_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_state1_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### LogReg: Difference from transition condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_df$condition) <- contr.treatment(5, base = 5)
# 
# log_model_learning_correct_state1_transition <- glmer(correct ~ group*version*condition + (1 | ID), data = logreg_learning_correct_state1_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
# tab_model(log_model_learning_correct_state1_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Time effects

### Percent correct paths starting from state 1 over time

Does % correct paths starting from state 1 change over time, and does it do so in different ways per group, version, and condition?

```{r}
# get percent correct over time
learning_correct_paths_group_version_condition_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number()
         ) %>%
  group_by(group, version, condition, accumulated_state1_visits) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_1, na.rm=TRUE)[2],
            ci_u = ci(correct_state_1, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_paths_group_version_condition_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

-   alcohol version: starts off at a very high level
-   control version: slight increase particularly in the beginning

```{r}
# bar plot state 1
ggplot(learning_correct_paths_group_version_condition_time_df, aes(x=accumulated_state1_visits, y=mean_correct, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

#### LogReg: time effects across conditions

-   no time effects across conditions and versions

```{r}
logreg_learning_correct_paths_group_version_time_df <- trial_df %>%
    filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID) %>%
  mutate(accumulated_state1_visits = row_number(),
         correct = as.factor(correct_path),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version, 
         ID,
         correct,
         accumulated_state1_visits)

contrasts(logreg_learning_correct_paths_group_version_time_df$group) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_paths_group_version_time_df$version) <- contr.treatment(2, base = 2)

log_model_learning_correct_paths_time <- glmer(correct ~ 1 + group*version*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_paths_group_version_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

tab_model(log_model_learning_correct_paths_time, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from control condition

```{r}
# logreg_learning_correct_paths_group_version_condition_time_df <- trial_df %>%
#     filter(phase == "learning",
#          state %in% c(1)
#          ) %>%
#   group_by(ID, condition) %>%
#   mutate(accumulated_state1_visits = row_number(),
#          correct = as.factor(correct_path),
#          condition = as.factor(condition),
#          version = as.factor(version),
#          group = as.factor(group)) %>%
#   select(group,
#          version, 
#          ID,
#          correct,
#          condition,
#          accumulated_state1_visits)
# 
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$condition) <- contr.treatment(5, base = 1)
# 
# log_model_learning_correct_paths_time_control <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_paths_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_paths_time_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from goal-state condition

```{r}
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$condition) <- contr.treatment(5, base = 2)
# 
# log_model_learning_correct_paths_time_goal <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_paths_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_paths_time_goal, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from policy condition

```{r}
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$condition) <- contr.treatment(5, base = 3)
# 
# log_model_learning_correct_paths_time_policy <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_paths_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(logreg_learning_correct_paths_group_version_condition_time_df, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from reward condition

```{r}
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$condition) <- contr.treatment(5, base = 4)
# 
# log_model_learning_correct_paths_time_reward <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_paths_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_paths_time_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from transition condition

```{r}
# contrasts(logreg_learning_correct_paths_group_version_condition_time_df$condition) <- contr.treatment(5, base = 5)
# 
# log_model_learning_correct_paths_time_transition <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_paths_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(logreg_learning_correct_paths_group_version_condition_time_df, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

### Percent correct all states per component over time

Does % correct in states 1, 2, and 3 change over time, and does it do so in different ways per group, version, and condition?

```{r}
# get percent correct over time
learning_correct_group_version_condition_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  mutate(time_bin = cut(
    trial,
    breaks = 5,
    labels = c("T1", "T2", "T3", "T4", "T5")
    )
  ) %>%
  group_by(group, version, condition, time_bin) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_group_version_condition_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")
```

```{r}
ggplot(learning_correct_group_version_condition_time_df, aes(x=condition, y=mean_correct, fill=time_bin)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous(limits = c(0, 1.1)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey', 'pink'))
```

#### LogReg: Time effects across conditions

-   increase in % correct over 5 time bins
-   stronger in alcohol version

```{r}
logreg_learning_correct_group_version_time_df <- trial_df %>%
    filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  mutate(time_bin = cut(
    trial,
    breaks = 5,
    labels = c("T1", "T2", "T3", "T4", "T5")),
    correct = as.factor(correct),
    version = as.factor(version),
    group = as.factor(group),
    time_bin = as.numeric(time_bin)) %>%
  group_by(ID, group, version, time_bin) %>%
  select(ID,
         group,
         version,
         time_bin,
         correct,
         condition)

contrasts(logreg_learning_correct_group_version_time_df$group) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_group_version_time_df$version) <- contr.treatment(2, base = 2)

log_model_learning_correct_time <- glmer(correct ~ 1 + group*version*time_bin + (1|ID), data = logreg_learning_correct_group_version_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

tab_model(log_model_learning_correct_time, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from control condition

```{r}
# logreg_learning_correct_group_version_condition_time_df <- trial_df %>%
#     filter(phase == "learning",
#          state %in% c(1,2,3)
#          ) %>%
#   mutate(time_bin = cut(
#     trial,
#     breaks = 5,
#     labels = c("T1", "T2", "T3", "T4", "T5")),
#     correct = as.factor(correct),
#     condition = as.factor(condition),
#     version = as.factor(version),
#     group = as.factor(group),
#     time_bin = as.numeric(time_bin)) %>%
#   group_by(ID, group, version, condition, time_bin) %>%
#   select(ID,
#          group,
#          version,
#          time_bin,
#          correct,
#          condition)
# 
# contrasts(logreg_learning_correct_group_version_condition_time_df$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_group_version_condition_time_df$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_group_version_condition_time_df$condition) <- contr.treatment(5, base = 1)
# 
# log_model_learning_correct_time_control <- glmer(correct ~ 1 + group*version*condition*time_bin + (1|ID), data = logreg_learning_correct_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_time_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from goal-state condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_time_df$condition) <- contr.treatment(5, base = 2)
# 
# log_model_learning_correct_time_goal <- glmer(correct ~ 1 + group*version*condition*time_bin + (1|ID), data = logreg_learning_correct_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_time_goal, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from policy condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_time_df$condition) <- contr.treatment(5, base = 3)
# 
# log_model_learning_correct_time_policy <- glmer(correct ~ 1 + group*version*condition*time_bin + (1|ID), data = logreg_learning_correct_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_time_policy, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from reward condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_time_df$condition) <- contr.treatment(5, base = 4)
# 
# log_model_learning_correct_time_reward <- glmer(correct ~ 1 + group*version*condition*time_bin + (1|ID), data = logreg_learning_correct_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_time_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from transition condition

```{r}
# contrasts(logreg_learning_correct_group_version_condition_time_df$condition) <- contr.treatment(5, base = 5)
# 
# log_model_learning_correct_time_transition <- glmer(correct ~ 1 + group*version*condition*time_bin + (1|ID), data = logreg_learning_correct_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_time_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

### Percent correct state 1 over time

Does % correct in state 1 change over time, and does it do so in different ways per group, version, and condition?

```{r}
# get percent correct over time
learning_state1_correct_group_version_condition_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number(),
         
         ) %>%
  group_by(group, version, condition, accumulated_state1_visits) %>%
  summarise(mean_correct = mean(correct_state_1, na.rm = TRUE),
            se_correct = sd(correct_state_1, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_1, na.rm=TRUE)[2],
            ci_u = ci(correct_state_1, na.rm=TRUE)[3],
            n = n()
            )

learning_state1_correct_group_version_condition_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot state 1
ggplot(learning_state1_correct_group_version_condition_time_df, aes(x=accumulated_state1_visits, y=mean_correct, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))

```

#### LogReg: Time effects across conditions

-   no time effects

```{r}
logreg_learning_correct_state1_group_version_time_df <- trial_df %>%
    filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number(),
         correct = as.factor(correct),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version, 
         ID,
         correct,
         condition,
         accumulated_state1_visits)

contrasts(logreg_learning_correct_state1_group_version_time_df$group) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_state1_group_version_time_df$version) <- contr.treatment(2, base = 2)

log_model_learning_correct_state1_time <- glmer(correct ~ 1 + group*version*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_state1_group_version_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

tab_model(log_model_learning_correct_state1_time, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from control condition

```{r}
# logreg_learning_correct_state1_group_version_condition_time_df <- trial_df %>%
#     filter(phase == "learning",
#          state %in% c(1)
#          ) %>%
#   group_by(ID, condition) %>%
#   mutate(accumulated_state1_visits = row_number(),
#          correct = as.factor(correct),
#          condition = as.factor(condition),
#          version = as.factor(version),
#          group = as.factor(group)) %>%
#   select(group,
#          version, 
#          ID,
#          correct,
#          condition,
#          accumulated_state1_visits)
# 
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$condition) <- contr.treatment(5, base = 1)
# 
# log_model_learning_correct_state1_time_control <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_state1_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_state1_time_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from goal-state condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$condition) <- contr.treatment(5, base = 2)
# 
# log_model_learning_correct_state1_time_goal <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_state1_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_state1_time_goal, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from policy condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$condition) <- contr.treatment(5, base = 3)
# 
# log_model_learning_correct_state1_time_policy <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_state1_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_state1_time_policy, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from reward condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$condition) <- contr.treatment(5, base = 4)
# 
# log_model_learning_correct_state1_time_reward <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_state1_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_state1_time_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Difference from transition condition

```{r}
# contrasts(logreg_learning_correct_state1_group_version_condition_time_df$condition) <- contr.treatment(5, base = 5)
# 
# log_model_learning_correct_state1_time_transition <- glmer(correct ~ 1 + group*version*condition*accumulated_state1_visits + (1|ID), data = logreg_learning_correct_state1_group_version_condition_time_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# tab_model(log_model_learning_correct_state1_time_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

## Rule out confounding variables / alternative explanations

### Percent correct all states per condition index

-   lower % correct in 1st condition

```{r}
# get percent correct over time
learning_correct_condition_index_df <- trial_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(group, version, condition_index) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_condition_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_correct_condition_index_df, aes(x=condition_index, y=mean_correct)) +
  geom_bar(stat="identity", fill='lightblue') +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1.1)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

#### LogReg: group \* condition \* condition index

-   slight increase in % correct from earlier to later conditions
-   this effect is stronger in low-risk group

```{r}
logreg_learning_correct_group_version_index_df <- trial_df %>%
  filter(phase == "learning") %>%
  mutate(correct = as.factor(correct),
         group = as.factor(group),
         version = as.factor(version)) %>%
  select(ID,
         correct,
         group,
         version,
         condition_index)

contrasts(logreg_learning_correct_group_version_index_df$version) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_group_version_index_df$group) <- contr.treatment(2, base = 2)

log_model_learning_correct_group_version_index <- glmer(correct ~ group*version*condition_index + (1 | ID), data = logreg_learning_correct_group_version_index_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_correct_group_version_index, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Percent correct all states per environment

```{r}
# get percent correct over time
learning_correct_group_version_environment_df <- trial_df %>%
  mutate(group = as.factor(group),
         version = as.factor(version),
         environment = as.factor(environment)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(group, version, environment) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_group_version_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_correct_group_version_environment_df, aes(x=environment, y=mean_correct)) +
  geom_bar(stat="identity", fill='lightblue') +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1.2)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) 
```

#### LogReg: group \* condition \* environment

-   Lower than average % correct in brauhaus environment
-   Higher than average % correct in messy green environment
-   no interactions with group

```{r}
logreg_learning_correct_group_version_env_df <- trial_df %>%
  filter(phase == "learning") %>%
  mutate(correct = as.factor(correct),
         group = as.factor(group),
         version = as.factor(version),
         environment = as.factor(environment)) %>%
  select(ID,
         correct,
         group,
         version,
         environment)

contrasts(logreg_learning_correct_group_version_env_df$version) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_group_version_env_df$group) <- contr.treatment(2, base = 2)
contrasts(logreg_learning_correct_group_version_env_df$environment) <- contr.sum(10)


log_model_learning_correct_group_version_env <- glmer(correct ~ group*version*environment + (1 | ID), data = logreg_learning_correct_group_version_env_df, family = "binomial", control=glmerControl(optimizer="bobyqa"))
tab_model(log_model_learning_correct_group_version_env, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Balancing check: variations

-   variations = latin square matching between condition order and environment order

```{r}
# get percent correct over time
balancing_variations_df <- component_df %>%
  filter(component == "control-learning"
         ) %>%
  group_by(variation) %>%
  summarise(n = n()
            )

balancing_variations_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

### Balancing check: Condition index per condition

```{r}
# get percent correct over time
balancing_index_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(condition, condition_index) %>%
  summarise(n = n()
            )

balancing_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

### Balancing check: Condition index per environment

```{r}
# get percent correct over time
balancing_environment_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(condition_index, environment) %>%
  summarise(n = n()
            )

balancing_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

### Balancing check: Condition per environment

-   in final study, we should collect data until equal n per cell

-   e.g. policy most often in well-learnable hip_purple environment

```{r}
# get percent correct over time
balancing_environment_df <- component_df %>%
  mutate(condition = as.factor(condition)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(condition, environment) %>%
  summarise(n = n()
            )

balancing_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

# Test Phase

## Main analysis: Correct paths starting from state 1 across all 5 test trials

```{r}
test_correct_paths_group_version_condition_df <- trial_df %>%
  filter(phase == "test",
         state %in% c(1)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

test_correct_paths_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_correct_paths_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct paths", limits = c(0, 1.2)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
# Prepare LogReg dfs
logreg_test_path_group_version_condition_df_full <- trial_df %>%
  filter(phase == "test",
         state == 1) %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version,
         ID,
         correct_path,
         condition)

logreg_test_path_condition_df_lowrisk_control <- trial_df %>%
  filter(phase == "test",
         state == 1,
         group == "low-risk",
         version == "control") %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition)) %>%
  select(ID,
         correct_path,
         condition)

logreg_test_path_group_condition_df_alcohol <- trial_df %>%
  filter(phase == "test",
         state == 1,
         version == "alcohol") %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition),
         group = as.factor(group)) %>%
  select(group,
         ID,
         correct_path,
         condition)
```

### Model 1: Low-risk drinkers, control version, compare against transition revaluation

-   Hypothesis 1: As expected, low-risk drinkers use SR to some extent when learning in a non-alcohol context. Specifically, they choose more correct test phase paths in the reward revaluation and the goal-state revaluation conditions compared to the transition revaluation condition, respectively.

```{r}
contrasts(logreg_test_path_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 5)

model1 <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
tab_model(model1, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Model 2: Low-risk drinkers, control version, compare against policy revaluation

-   Hypothesis 2a: As expected, the difference between reward and transition revaluation cannot fully be explained by use of a model-based strategy with a higher learning rate for the reward compared to the transition structure. Specifically, low-risk drinkers choose fewer correct test phase paths in the policy revaluation condition compared to the reward condition.
-   Hypothesis 2b: Different from what we expected, this is not the case for the goal-state revaluation condition.

```{r}
contrasts(logreg_test_path_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 3)

model2 <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
tab_model(model2, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Model 3: Full dataset, compare against transition revaluation

No conclusions can be drawn at this point because of low n in cell control version / harmful drinkers.
-   Hypothesis 3: As expected, harmful drinkers show a higher degree of SR use compared to low-risk drinkers. Specifically, they choose more correct test phase paths in the reward revaluation condition compared to the transition revaluation condition compared to low-risk drinkers.
-   Hypothesis 4: Different from what we expected, this effect is *weaker* when learning in an alcohol compared to a non-alcohol context.

```{r}
contrasts(logreg_test_path_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
contrasts(logreg_test_path_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5)

# create model matrices
mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_group_version_condition_df_full)
version_alc <- mm_version[,2] # version alc compared to version monetary

mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_group_version_condition_df_full)
group_harmful <- mm_group[,2] # group harmful compared to low-risk

mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_group_version_condition_df_full)
condition_control <- mm_condition[,2] # condition control compared to transition
condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
condition_policy <- mm_condition[,4] # condition policy compared to transition
condition_reward <- mm_condition[,5] # condition reward compared to transition

model3 <- glmer(correct_path ~ 
                  condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful +
                  condition_control:group_harmful + condition_goalstate:group_harmful +
                  condition_policy:group_harmful + condition_reward:group_harmful +
                  condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
                  condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + 
                  (1 | ID), 
                data = logreg_test_path_group_version_condition_df_full, 
                family = "binomial", 
                glmerControl(optimizer = "bobyqa"))

tab_model(model3, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Model 4: Alcohol context, compare against reward revaluation

-   Hypothesis 5: Different from what we expected, harmful drinkers *don't* show a higher degree of rigid goal-based reduced SR use when learning in an alcohol context compared to low-risk drinkers. Specifically, they *don't* choose less correct test phase paths in the goal-state compared to the reward revaluation condition compared to low-risk drinkers.

```{r}
contrasts(logreg_test_path_group_condition_df_alcohol$group) <- contr.treatment(2, base = 2)
contrasts(logreg_test_path_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 4)

model4 <- glmer(correct_path ~ condition*group + (1 | ID), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa"))
tab_model(model4, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Model 5: Full dataset, compare against reward revaluation

No conclusions can be drawn at this point because of low n in cell control version / harmful drinkers.
- Model does not converge

```{r}
contrasts(logreg_test_path_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
contrasts(logreg_test_path_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 4)

# create model matrices
mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_group_version_condition_df_full)
version_alc <- mm_version[,2] # version alc compared to version monetary

mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_group_version_condition_df_full)
group_harmful <- mm_group[,2] # group harmful compared to low-risk

mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_group_version_condition_df_full)
condition_control <- mm_condition[,2] # condition control compared to reward
condition_goalstate <- mm_condition[,3] # condition goalstate compared to reward
condition_policy <- mm_condition[,4] # condition policy compared to reward
condition_transition <- mm_condition[,5] # condition transition compared to reward

model5 <- glmer(correct_path ~ 
                  condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful +
                  condition_control:group_harmful + condition_goalstate:group_harmful + 
                  condition_policy:group_harmful + condition_transition:group_harmful + 
                  condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
                  condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc + 
                  (1 | ID), 
                data = logreg_test_path_group_version_condition_df_full, 
                family = "binomial", 
                glmerControl(optCtrl=list(maxfun=1e5), 
                             optimizer = "bobyqa"))
tab_model(model5, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Exploratory analysis 1: Include all effects of context into models 3 and 5

### Model 3_expl1: Full dataset, compare against transition revaluation

No conclusions can be drawn at this point because of low n in cell control version / harmful drinkers.
- Model does not converge

```{r}
# contrasts(logreg_test_path_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5)
# 
# model3_expl1 <- glmer(correct_path ~ condition*group*version + (1 | ID), 
#                 data = logreg_test_path_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optCtrl=list(maxfun=1e5), 
#                              optimizer = "bobyqa"))
# 
# tab_model(model3_expl1, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```
### Model 5_expl1: Full dataset, compare against reward revaluation

No conclusions can be drawn at this point because of low n in cell control version / harmful drinkers.
- Model does not converge

```{r}
# contrasts(logreg_test_path_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 4)
# 
# model5_expl1 <- glmer(correct_path ~ condition*group*version + (1 | ID), 
#                 data = logreg_test_path_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optCtrl=list(maxfun=1e5), 
#                              optimizer = "bobyqa"))
# tab_model(model5_expl1, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Exploratory analysis 4: Alternative dependent variables

### Do test trials differ regarding correct paths and correct state 1 choices?

#### Correct paths

- Differences between conditions look largely consistent across 5 test trials (need to test this still)

```{r}
test_path_group_version_condition_trial_df <- trial_df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(group, version, condition, trial) %>%
  summarise(n = n(),
            sum_correct_path = sum(correct_path, na.rm=T),
            mean_correct_path = mean(correct_path, na.rm=T),
            se_correct_path = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3]
            )

test_path_group_version_condition_trial_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# line plot state 1
ggplot(test_path_group_version_condition_trial_df, aes(x=trial, y=mean_correct_path, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  facet_grid(vars(group), vars(version)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO add logreg to test this

#### Correct state 1 choices

- Differences between conditions look largely consistent across 5 test trials (need to test this still)

```{r}
test_correct_group_version_condition_trial_df <- trial_df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(group, version, condition, trial) %>%
  summarise(n = n(),
            sum_correct = sum(correct, na.rm=T),
            mean_correct = mean(correct, na.rm=T),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3]
            )

test_correct_group_version_condition_trial_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# line plot state 1
ggplot(test_correct_group_version_condition_trial_df, aes(x=trial, y=mean_correct, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  facet_grid(vars(group), vars(version)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO add logreg to test this

### Exploratory analysis 4a: Correct paths starting from state 1 in first test trial only

```{r}
test_correct_paths_trial1_group_version_condition_df <- trial_df %>%
  filter(phase == "test",
         trial == 1,
         state %in% c(1)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

test_correct_paths_trial1_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_correct_paths_trial1_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct paths", limits = c(-0.1, 1.3)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
# Prepare LogReg dfs
logreg_test_path_trial1_group_version_condition_df_full <- trial_df %>%
  filter(phase == "test",
         state == 1,
         trial == 1) %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version,
         ID,
         correct_path,
         condition)

logreg_test_path_trial1_condition_df_lowrisk_control <- trial_df %>%
  filter(phase == "test",
         state == 1,
         trial == 1,
         group == "low-risk",
         version == "control") %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition)) %>%
  select(ID,
         correct_path,
         condition)

logreg_test_path_trial1_group_condition_df_alcohol <- trial_df %>%
  filter(phase == "test",
         state == 1,
         trial == 1,
         version == "alcohol") %>%
  mutate(correct_path = as.factor(correct_path),
         condition = as.factor(condition),
         group = as.factor(group)) %>%
  select(group,
         ID,
         correct_path,
         condition)
```

#### Model 1_expl4a: Low-risk drinkers, control version, compare against transition revaluation

-   Hypothesis 1: As expected, low-risk drinkers use SR to some extent when learning in a non-alcohol context. Specifically, they choose more correct state 1 actions in the reward revaluation and the goal-state revaluation conditions compared to the transition revaluation condition, respectively.

```{r}
# contrasts(logreg_test_path_trial1_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 5)
# 
# model1_expl4a <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_trial1_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model1_expl4a, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 2_expl4a: Low-risk drinkers, control version, compare against policy revaluation

-   Hypothesis 2a: As expected, the difference between reward and transition revaluation cannot fully be explained by use of a model-based strategy with a higher learning rate for the reward compared to the transition structure. Specifically, low-risk drinkers choose fewer correct state 1 actions in the policy revaluation condition compared to the reward condition.
-   Hypothesis 2b: Different from what we expected, this is not the case for the goal-state revaluation condition.

```{r}
# contrasts(logreg_test_path_trial1_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 3)
# 
# model2_expl4a <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_trial1_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model2_expl4a, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 3_expl4a: Full dataset, compare against transition revaluation

No conclusions can be drawn at this point because of low n in cell control version / harmful drinkers.
-   Hypothesis 3: different from what we expected, harmful drinkers *don't* show a higher degree of SR use compared to low-risk drinkers. Specifically, they *don't* choose more correct state 1 actions in the reward revaluation condition compared to the transition revaluation condition compared to low-risk drinkers.
-   Hypothesis 4: Different from what we expected, harmful drinkers choose more correct state 1 actions in the reward compared to the transition revaluation condition when learning in a *non-alcohol* compared to an alcohol context.

```{r}
# contrasts(logreg_test_path_trial1_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_trial1_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_trial1_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5)
# 
# # create model matrices
# mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_trial1_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_trial1_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_trial1_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to transition
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
# condition_policy <- mm_condition[,4] # condition policy compared to transition
# condition_reward <- mm_condition[,5] # condition reward compared to transition
# 
# model3_expl4a <- glmer(correct_path ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful +
#                   condition_policy:group_harmful + condition_reward:group_harmful +
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_path_trial1_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optimizer = "bobyqa"))
# 
# tab_model(model3_expl4a, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 4_expl4a: Alcohol context, compare against reward revaluation

-   Hypothesis 5: Different from what we expected, harmful drinkers *don't* show a higher degree of rigid goal-based reduced SR use when learning in an alcohol context compared to low-risk drinkers. Specifically, they *don't* choose less correct test phase paths in the goal-state compared to the reward revaluation condition compared to low-risk drinkers.

```{r}
# contrasts(logreg_test_path_trial1_group_condition_df_alcohol$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_trial1_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 4)
# 
# model4_expl4a <- glmer(correct_path ~ condition*group + (1 | ID), data = logreg_test_path_trial1_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model4_expl4a, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 5_expl4a: Full dataset, compare against reward revaluation

No conclusions can be drawn at this point because of low n in cell control version / harmful drinkers.
- Model does not converge

```{r}
# contrasts(logreg_test_path_trial1_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_trial1_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_trial1_group_version_condition_df_full$condition) <- contr.treatment(5, base = 4)
# 
# # create model matrices
# mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_trial1_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_trial1_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_trial1_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to reward
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to reward
# condition_policy <- mm_condition[,4] # condition policy compared to reward
# condition_transition <- mm_condition[,5] # condition transition compared to reward
# 
# model5_expl4a <- glmer(correct_path ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful + 
#                   condition_policy:group_harmful + condition_transition:group_harmful + 
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_path_trial1_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optCtrl=list(maxfun=1e5), 
#                              optimizer = "bobyqa"))
# tab_model(model5_expl4a, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Exploratory analysis 4b: State 1 switches in all 5 test trials

```{r}
test_correct_group_version_condition_df <- trial_df %>%
  filter(phase == "test",
         state %in% c(1)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

test_correct_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_correct_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct", limits = c(0, 1.2)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
# Prepare LogReg dfs
logreg_test_correct_group_version_condition_df_full <- trial_df %>%
  filter(phase == "test",
         state == 1) %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version,
         ID,
         correct,
         condition)

logreg_test_correct_condition_df_lowrisk_control <- trial_df %>%
  filter(phase == "test",
         state == 1,
         group == "low-risk",
         version == "control") %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition)) %>%
  select(ID,
         correct,
         condition)

logreg_test_correct_group_condition_df_alcohol <- trial_df %>%
  filter(phase == "test",
         state == 1,
         version == "alcohol") %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition),
         group = as.factor(group)) %>%
  select(group,
         ID,
         correct,
         condition)
```

#### Model 1_expl4b: Low-risk drinkers, control version, compare against transition revaluation

```{r}
# contrasts(logreg_test_correct_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 5)
# 
# model1_expl4b <- glmer(correct ~ condition + (1 | ID), data = logreg_test_correct_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model1_expl4b, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 2_expl4b: Low-risk drinkers, control version, compare against policy revaluation

```{r}
# contrasts(logreg_test_correct_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 3)
# 
# model2_expl4b <- glmer(correct ~ condition + (1 | ID), data = logreg_test_correct_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model2_expl4b, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 3_expl4b: Full dataset, compare against transition revaluation

```{r}
# contrasts(logreg_test_correct_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5)
# 
# # create model matrices
# mm_version <- model.matrix(correct ~ 1 + version, data=logreg_test_correct_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(correct ~ 1 + group, data=logreg_test_correct_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(correct ~ 1 + condition, data=logreg_test_correct_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to transition
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
# condition_policy <- mm_condition[,4] # condition policy compared to transition
# condition_reward <- mm_condition[,5] # condition reward compared to transition
# 
# model3_expl4b <- glmer(correct ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful +
#                   condition_policy:group_harmful + condition_reward:group_harmful +
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_correct_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optimizer = "bobyqa"))
# 
# tab_model(model3_expl4b, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 4_expl4b: Alcohol context, compare against reward revaluation

```{r}
# contrasts(logreg_test_correct_group_condition_df_alcohol$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 4)
# 
# model4_expl4b <- glmer(correct ~ condition*group + (1 | ID), data = logreg_test_correct_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model4_expl4b, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 5_expl4b: Full dataset, compare against reward revaluation

```{r}
# contrasts(logreg_test_correct_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_group_version_condition_df_full$condition) <- contr.treatment(5, base = 4)
# 
# # create model matrices
# mm_version <- model.matrix(correct ~ 1 + version, data=logreg_test_correct_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(correct ~ 1 + group, data=logreg_test_correct_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(correct ~ 1 + condition, data=logreg_test_correct_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to reward
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to reward
# condition_policy <- mm_condition[,4] # condition policy compared to reward
# condition_transition <- mm_condition[,5] # condition transition compared to reward
# 
# model5_expl4b <- glmer(correct ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful + 
#                   condition_policy:group_harmful + condition_transition:group_harmful + 
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_correct_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optCtrl=list(maxfun=1e5), 
#                              optimizer = "bobyqa"))
# tab_model(model5_expl4b, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Exploratory analysis 4c: State 1 switches in first test trials

```{r}
test_correct_trial1_group_version_condition_df <- trial_df %>%
  filter(phase == "test",
         trial == 1,
         state %in% c(1)
         ) %>%
  group_by(group, version, condition) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

test_correct_trial1_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_correct_trial1_group_version_condition_df, aes(x=condition, y=mean_correct)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group), vars(version)) +
  scale_y_continuous("% correct", limits = c(0, 1.3)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

```

```{r}
# Prepare LogReg dfs
logreg_test_correct_trial1_group_version_condition_df_full <- trial_df %>%
  filter(phase == "test",
         trial == 1,
         state == 1) %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version,
         ID,
         correct,
         condition)

logreg_test_correct_trial1_condition_df_lowrisk_control <- trial_df %>%
  filter(phase == "test",
         state == 1,
         trial == 1,
         group == "low-risk",
         version == "control") %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition)) %>%
  select(ID,
         correct,
         condition)

logreg_test_correct_trial1_group_condition_df_alcohol <- trial_df %>%
  filter(phase == "test",
         state == 1,
         trial == 1,
         version == "alcohol") %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition),
         group = as.factor(group)) %>%
  select(group,
         ID,
         correct,
         condition)
```

#### Model 1_expl4c: Low-risk drinkers, control version, compare against transition revaluation

```{r}
# contrasts(logreg_test_correct_trial1_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 5)
# 
# model1_expl4c <- glmer(correct ~ condition + (1 | ID), data = logreg_test_correct_trial1_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model1_expl4c, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 2_expl4b: Low-risk drinkers, control version, compare against policy revaluation

```{r}
# contrasts(logreg_test_correct_trial1_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 3)
# 
# model2_expl4c <- glmer(correct ~ condition + (1 | ID), data = logreg_test_correct_trial1_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model2_expl4c, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 3_expl4b: Full dataset, compare against transition revaluation

```{r}
# contrasts(logreg_test_correct_trial1_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_trial1_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_trial1_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5)
# 
# # create model matrices
# mm_version <- model.matrix(correct ~ 1 + version, data=logreg_test_correct_trial1_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(correct ~ 1 + group, data=logreg_test_correct_trial1_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(correct ~ 1 + condition, data=logreg_test_correct_trial1_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to transition
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
# condition_policy <- mm_condition[,4] # condition policy compared to transition
# condition_reward <- mm_condition[,5] # condition reward compared to transition
# 
# model3_expl4c <- glmer(correct ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful +
#                   condition_policy:group_harmful + condition_reward:group_harmful +
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_correct_trial1_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optimizer = "bobyqa"))
# 
# tab_model(model3_expl4c, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 4_expl4b: Alcohol context, compare against reward revaluation

```{r}
# contrasts(logreg_test_correct_trial1_group_condition_df_alcohol$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_trial1_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 4)
# 
# model4_expl4c <- glmer(correct ~ condition*group + (1 | ID), data = logreg_test_correct_trial1_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa"))
# tab_model(model4_expl4c, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 5_expl4b: Full dataset, compare against reward revaluation

```{r}
# contrasts(logreg_test_correct_trial1_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_trial1_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_correct_trial1_group_version_condition_df_full$condition) <- contr.treatment(5, base = 4)
# 
# # create model matrices
# mm_version <- model.matrix(correct ~ 1 + version, data=logreg_test_correct_trial1_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(correct ~ 1 + group, data=logreg_test_correct_trial1_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(correct ~ 1 + condition, data=logreg_test_correct_trial1_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to reward
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to reward
# condition_policy <- mm_condition[,4] # condition policy compared to reward
# condition_transition <- mm_condition[,5] # condition transition compared to reward
# 
# model5_expl4c <- glmer(correct ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful + 
#                   condition_policy:group_harmful + condition_transition:group_harmful + 
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_correct_trial1_group_version_condition_df_full, 
#                 family = "binomial", 
#                 glmerControl(optimizer = "bobyqa"))
# tab_model(model5_expl4c, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```
### Exploratory analysis 4d: Rating score per first state action

```{r}
rating_state1_group_version_condition_df <- rating_df %>%
  group_by(group, version, condition) %>%
  summarise(n = n(),
            mean_rating_diff = mean(rating_diff_state1, na.rm=T),
            se_rating_diff = sd(rating_diff_state1, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(rating_diff_state1, na.rm=TRUE)[2],
            ci_u = ci(rating_diff_state1, na.rm=TRUE)[3]
            )

rating_state1_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(rating_state1_group_version_condition_df, aes(x=condition, y=mean_rating_diff)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous("Optimal-suboptimal rating", limits = c(-50, 100)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

```{r}
# Prepare LogReg dfs
logreg_test_rating_group_version_condition_df_full <- rating_df %>%
  mutate(condition = as.factor(condition),
         version = as.factor(version),
         group = as.factor(group)) %>%
  select(group,
         version,
         ID,
         rating_diff_state1,
         condition)

logreg_test_rating_condition_df_lowrisk_control <- rating_df %>%
  filter(group == "low-risk",
         version == "control") %>%
  mutate(condition = as.factor(condition)) %>%
  select(ID,
         rating_diff_state1,
         condition)

logreg_test_rating_group_condition_df_alcohol <- rating_df %>%
  filter(version == "alcohol") %>%
  mutate(condition = as.factor(condition),
         group = as.factor(group)) %>%
  select(group,
         ID,
         rating_diff_state1,
         condition)
```

#### Model 1_expl4d: Low-risk drinkers, control version, compare against transition revaluation

```{r}
# contrasts(logreg_test_rating_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 5)
# 
# model1_expl4d <- lmer(rating_diff_state1 ~ condition + (1 | ID), data = logreg_test_rating_condition_df_lowrisk_control, REML = F, lmerControl(optimizer = "bobyqa"))
# tab_model(model1_expl4d, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 2_expl4b: Low-risk drinkers, control version, compare against policy revaluation

```{r}
# contrasts(logreg_test_rating_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 3)
# 
# model2_expl4d <- lmer(rating_diff_state1 ~ condition + (1 | ID), data = logreg_test_rating_condition_df_lowrisk_control, REML = F, lmerControl(optimizer = "bobyqa"))
# tab_model(model2_expl4d, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 3_expl4b: Full dataset, compare against transition revaluation

```{r}
# contrasts(logreg_test_rating_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_rating_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_rating_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5)
# 
# # create model matrices
# mm_version <- model.matrix(rating_diff_state1 ~ 1 + version, data=logreg_test_rating_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(rating_diff_state1 ~ 1 + group, data=logreg_test_rating_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(rating_diff_state1 ~ 1 + condition, data=logreg_test_rating_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to transition
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
# condition_policy <- mm_condition[,4] # condition policy compared to transition
# condition_reward <- mm_condition[,5] # condition reward compared to transition
# 
# model3_expl4d <- lmer(rating_diff_state1 ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful +
#                   condition_policy:group_harmful + condition_reward:group_harmful +
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_rating_group_version_condition_df_full,
#                 REML = F, lmerControl(optimizer = "bobyqa"))
# 
# tab_model(model3_expl4d, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 4_expl4b: Alcohol context, compare against reward revaluation

```{r}
# contrasts(logreg_test_rating_group_condition_df_alcohol$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_rating_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 4)
# 
# model4_expl4d <- lmer(rating_diff_state1 ~ condition*group + (1 | ID), data = logreg_test_rating_group_condition_df_alcohol, REML = F, lmerControl(optimizer = "bobyqa"))
# tab_model(model4_expl4d, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Model 5_expl4b: Full dataset, compare against reward revaluation

```{r}
# contrasts(logreg_test_rating_group_version_condition_df_full$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_rating_group_version_condition_df_full$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_rating_group_version_condition_df_full$condition) <- contr.treatment(5, base = 4)
# 
# # create model matrices
# mm_version <- model.matrix(rating_diff_state1 ~ 1 + version, data=logreg_test_rating_group_version_condition_df_full)
# version_alc <- mm_version[,2] # version alc compared to version monetary
# 
# mm_group <- model.matrix(rating_diff_state1 ~ 1 + group, data=logreg_test_rating_group_version_condition_df_full)
# group_harmful <- mm_group[,2] # group harmful compared to low-risk
# 
# mm_condition <- model.matrix(rating_diff_state1 ~ 1 + condition, data=logreg_test_rating_group_version_condition_df_full)
# condition_control <- mm_condition[,2] # condition control compared to reward
# condition_goalstate <- mm_condition[,3] # condition goalstate compared to reward
# condition_policy <- mm_condition[,4] # condition policy compared to reward
# condition_transition <- mm_condition[,5] # condition transition compared to reward
# 
# model5_expl4d <- lmer(rating_diff_state1 ~ 
#                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful +
#                   condition_control:group_harmful + condition_goalstate:group_harmful + 
#                   condition_policy:group_harmful + condition_transition:group_harmful + 
#                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc +
#                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc + 
#                   (1 | ID), 
#                 data = logreg_test_rating_group_version_condition_df_full,
#                 REML = F, lmerControl(optimizer = "bobyqa"))
# tab_model(model5_expl4d, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

#### Relation to test choices

```{r}
test_state1_df <- trial_df %>%
  filter(phase == "test",
         state == 1) %>%
  group_by(group, version, ID, condition) %>%
  summarise(percent_correct = mean(correct))

rating_diff_state1_df <- rating_df %>%
  group_by(group, version, ID, condition) %>%
  summarise(rating_diff_state1 = sum(rating_diff_state1, na.rm=T))

test_rating_state1_df <- merge(test_state1_df, rating_diff_state1_df, by = c("ID", "condition", "group", "version"))

test_rating_state1_df <- test_rating_state1_df %>%
  mutate(group = as.factor(group),
         version = as.factor(version),
         condition = as.factor(condition))
```

```{r}
# scatter plot
ggplot(test_rating_state1_df, aes(x=percent_correct, y=rating_diff_state1)) +
  geom_point() +
  geom_smooth() +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16)
```

```{r}
contrasts(test_rating_state1_df$version) <- contr.treatment(2, base = 2)
contrasts(test_rating_state1_df$group) <- contr.treatment(2, base = 2)

log_model_rating_correct <- lmer(rating_diff_state1 ~ percent_correct*group*version + (1 | ID), data = test_rating_state1_df)
tab_model(log_model_rating_correct, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Rule out confounding variables / alternative explanations

### Correct paths per condition index

-   switch rate intearcts unsystematically with condition index

```{r}
# get percent correct over time
test_paths_group_version_condition_index_df <- trial_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "test",
         state == 1
         ) %>%
  group_by(group, version, condition, condition_index) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

test_paths_group_version_condition_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_paths_group_version_condition_index_df, aes(x=condition_index, y=mean_correct, fill=condition)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-0.25, 1.5)) +
  facet_grid(vars(group), vars(version)) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink')) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
 

```

TODO test this

### Time on task \*condition (changes in strategy over time)

-   changes in strategy over time?

TODO insert figures

#### LogReg: Switches per accumulated state visits on task \* difference from control

```{r}
# logreg_test_path_condition_accumulatedtrial_df <- trial_df %>%
#   filter(phase == "test",
#          state == 1) %>%
#   mutate(correct_path = as.factor(correct_path),
#          condition = as.factor(condition),
#          version = as.factor(version),
#          group = as.factor(group)) %>%
#   select(group,
#          version, 
#          ID,
#          correct_path,
#          condition,
#          accumulated_states_visited)
# 
# contrasts(logreg_test_path_condition_accumulatedtrial_df$version) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_condition_accumulatedtrial_df$group) <- contr.treatment(2, base = 2)
# contrasts(logreg_test_path_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 1)
# 
# log_model_accumulated_states_visited_control <- glmer(correct_path ~ 1 + accumulated_states_visited*group*version*condition + (1|ID), data = logreg_test_path_condition_accumulatedtrial_df, family = "binomial", glmerControl(optimizer = "bobyqa"))
# 
# tab_model(log_model_accumulated_states_visited_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from goal-state

```{r}
# contrasts(logreg_test_path_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 2)
# 
# log_model_accumulated_states_visited_goal <- glmer(correct_path ~ 1 + accumulated_states_visited*group*version*condition  + (1|ID), data = logreg_test_path_condition_accumulatedtrial_df, family = "binomial", glmerControl(optimizer = "bobyqa"))
# 
# tab_model(log_model_accumulated_states_visited_goal, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from policy

```{r}
# contrasts(logreg_test_path_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 3)
# 
# log_model_accumulated_states_visited_policy <- glmer(correct_path ~ 1 + accumulated_states_visited*group*version*condition  + (1|ID), data = logreg_test_path_condition_accumulatedtrial_df, family = "binomial", glmerControl(optimizer = "bobyqa"))
# 
# tab_model(log_model_accumulated_states_visited_policy, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from reward

```{r}
# contrasts(logreg_test_path_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 4)
# 
# log_model_accumulated_states_visited_reward <- glmer(correct_path ~ 1 + accumulated_states_visited*group*version*condition  + (1|ID), data = logreg_test_path_condition_accumulatedtrial_df, family = "binomial", glmerControl(optimizer = "bobyqa"))
# 
# tab_model(log_model_accumulated_states_visited_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

#### LogReg: Switches per accumulated state visits on task \* difference from transition

```{r}
# contrasts(logreg_test_path_condition_accumulatedtrial_df$condition) <- contr.treatment(5, base = 5)
# 
# log_model_accumulated_states_visited_transition <- glmer(correct_path ~ 1 + accumulated_states_visited*group*version*condition  + (1|ID), data = logreg_test_path_condition_accumulatedtrial_df, family = "binomial", glmerControl(optimizer = "bobyqa"))
# 
# tab_model(log_model_accumulated_states_visited_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

### Switches per environment

```{r}
# get percent correct over time
test_path_component_environment_df <- trial_df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "test",
         state == 1
         ) %>%
  group_by(group, version, condition, environment) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n())

test_path_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(test_path_component_environment_df, aes(x=environment, y=mean_correct, fill=condition)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-0.25, 1.5)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
  

```

TODO test this

# Reaction times

## RT across states per condition and phase

```{r}
RT_condition_phase_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "control-test",
                          "reward-learning",
                          "reward-relearning",
                          "reward-test",
                          "transition-learning",
                          "transition-relearning",
                          "transition-test",
                          "policy-learning",
                          "policy-relearning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-relearning",
                          "goal-state-test")) %>%
  group_by(group, version, condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
ggplot(trial_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO test this

## RT in 2-choice states per condition and phase

```{r}
RT_twochoice_condition_phase_df <- trial_df %>%
  filter(state %in% c(1,2,3),
         component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test")) %>%
  group_by(group, version, condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_twochoice_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_twochoice_plotting_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3))

ggplot(RT_twochoice_plotting_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO test this

## RT in state 1 per condition and phase

-   higher RT in test trials (more effortful?)

```{r}
RT_state1_condition_phase_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1)) %>%
  group_by(group, version, condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_state1_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_state1_plotting_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1))

ggplot(RT_state1_plotting_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_wrap(~ version) +
  theme_light(base_size = 16) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO test this

## Relation RT - correct

### RT in 2-choice states - correct choice

```{r}
RT_twochoice_condition_phase_correct_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3)) %>%
  group_by(group, version, condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

RT_twochoice_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_twochoice_correct_df <- trial_df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3))

ggplot(RT_twochoice_correct_df, aes(x=phase, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO test this

### RT in state 1 - correct choice

```{r}
RT_state1_condition_phase_correct_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1)) %>%
  group_by(group, version, condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

RT_state1_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_state1_correct_df <- trial_df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "policy-learning",
                          "policy-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1))

ggplot(RT_state1_correct_df, aes(x=phase, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO test this

## RT in 1-choice states per condition and phase

```{r}
RT_onechoice_condition_phase_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "reward-learning",
                          "reward-relearning",
                          "transition-learning",
                          "transition-relearning",
                          "policy-learning",
                          "policy-relearning",
                          "goal-state-learning",
                          "goal-state-relearning"),
         state %in% c(4,5,6,7,8,9,10)) %>%
  group_by(group, version, condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_onechoice_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_onechoice_df <- trial_df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "reward-learning",
                          "reward-relearning",
                          "transition-learning",
                          "transition-relearning",
                          "policy-learning",
                          "policy-relearning",
                          "goal-state-learning",
                          "goal-state-relearning"),
         state %in% c(4,5,6,7,8,9,10))

ggplot(RT_onechoice_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey','pink'))
```

TODO test this

# Payment criterion

```{r}
payment_df <- trial_df %>%
  group_by(group, version, ID) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE))

payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="alcohol" & payment_df$group=="low-risk"]),]

payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="alcohol" & payment_df$group=="harmful"]),]

payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="control" & payment_df$group=="low-risk"]),]

payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="control" & payment_df$group=="harmful"]),]
```
