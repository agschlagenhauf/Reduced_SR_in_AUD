---
title: "Reduced SR in AUD Pilot"
author: "Milena Musial"
date: 06.06.2024
format: revealjs
editor: visual
---

```{r}
# Set up

rm(list = ls(all = TRUE))

# Load packages
packages <- c("ggplot2", "dplyr", "tidyr", "kableExtra", "gmodels", "lme4", "sjPlot")
#install.packages(packages)
lapply(packages, library, character.only = TRUE)

# define paths
data_path <- "C:/Users/musialm/OneDrive - Charité - Universitätsmedizin Berlin/PhD/04_B01/WP3/WP3_DATA/PILOT/behavioral_data"

# read dfs
load(file.path(data_path, "pilot_data_complete.RData"))
```

## Overview {.smaller}

-   correct choices learning phase & exclusion criteria
-   switches re-learning phase
-   switches test-phase
-   reaction times

# Learning Phase: Correct choices

## Learning phase conclusions {.smaller}

-   overall **73,5% correct**
-   **increase** in correct choices over time (n trials, n conditions)
-   **comparable** performance across **conditions and environments**
-   47% of participants don't not meet relaxed **inclusion criterion**

## Percent correct overall

```{r}
learning_correct_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(phase) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            ) 

learning_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 24,
                latex_options = "scale_down")
```

## Percent correct per component and state

```{r}
learning_correct_component_state_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(component, state) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            ) %>%
  mutate(state=as.factor(state))

learning_correct_component_state_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")

```

## Percent correct per component and state {.smaller}

-   Comparable learning performance across conditions

```{r}
# bar plot
ggplot(learning_correct_component_state_df, aes(x=component, y=mean_correct, fill=state)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  theme_light() +
  scale_y_continuous(limits = c(0, 1.2)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen'))

```

## LogReg: Difference from control condition {.smaller}

-   Comparable learning performance across conditions

```{r}
logreg_learning_correct_condition_df <- trial_df %>%
  filter(phase == "learning") %>%
  mutate(correct = as.factor(correct),
         condition = as.factor(condition)) %>%
  select(ID,
         correct,
         condition)

contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(4, base = 1)

log_model_learning_control <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")

tab_model(log_model_learning_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## LogReg: Difference from goal-state condition {.smaller}

-   Comparable learning performance across conditions

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(4, base = 2)

log_model_learning_goalstate <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## LogReg: Difference from reward condition {.smaller}

-   Comparable learning performance across conditions

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(4, base = 3)

log_model_learning_reward <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## LogReg: Difference from transition condition {.smaller}

-   Comparable learning performance across conditions

```{r}
contrasts(logreg_learning_correct_condition_df$condition) <- contr.treatment(4, base = 4)

log_model_learning_transition <- glm(correct ~ condition, data = logreg_learning_correct_condition_df, family = "binomial")
tab_model(log_model_learning_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Percent correct all states per component over time

```{r}
# get percent correct over time
learning_correct_component_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  mutate(time_bin = cut(
    trial,
    breaks = 4,
    labels = c("T1", "T2", "T3", "T4")
    )
  ) %>%
  group_by(component, time_bin) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_component_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Percent correct all states per component over time {.smaller}

-   Learning performance increases over time in all conditions
-   Plateau at \~ 85%

```{r}
ggplot(learning_correct_component_time_df, aes(x=component, y=mean_correct, fill=time_bin)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```

## Percent correct state 1 over time

```{r}
# get percent correct over time
learning_state1_correct_component_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number()
         ) %>%
  group_by(condition, accumulated_state1_visits) %>%
  summarise(mean_correct_state_1 = mean(correct_state_1, na.rm = TRUE),
            se_correct_state_1 = sd(correct_state_1, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_1, na.rm=TRUE)[2],
            ci_u = ci(correct_state_1, na.rm=TRUE)[3],
            n = n()
            )

learning_state1_correct_component_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Percent correct state 1 over time {.smaller}

-   Learning performance in state 1 increases over time in all conditions
-   Plateau at \~ 85%

```{r}
# bar plot state 1
ggplot(learning_state1_correct_component_time_df, aes(x=accumulated_state1_visits, y=mean_correct_state_1, fill=condition)) +
  geom_line(aes(color=condition), size=1) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## Percent correct all states per condition index

```{r}
# get percent correct over time
learning_correct_component_index_df <- trial_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(component, condition_index) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_component_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Percent correct all states per condition index {.smaller}

-   Comparable learning performance in earlier and later conditions
-   Trend-wise increase in later components

```{r}
# bar plot
ggplot(learning_correct_component_index_df, aes(x=condition_index, y=mean_correct, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## Percent correct all states per environment

```{r}
# get percent correct over time
learning_correct_component_environment_df <- trial_df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  group_by(component, environment) %>%
  summarise(mean_correct = mean(correct, na.rm = TRUE),
            se_correct = sd(correct, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct, na.rm=TRUE)[2],
            ci_u = ci(correct, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Percent correct all states per environment {.smaller}

-   Every condition works particularly well in one environment (balancing issues?)
-   Environments comparable

```{r}
# bar plot
ggplot(learning_correct_component_environment_df, aes(x=environment, y=mean_correct, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## Balancing check: variations

-   Balancing of variations not entirely successful as drop-outs increase running ID

```{r}
# get percent correct over time
balancing_variations_df <- component_df %>%
  filter(component == "control-learning"
         ) %>%
  group_by(variation) %>%
  summarise(n = n()
            )

balancing_variations_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Balancing check: Condition index per condition

```{r}
# get percent correct over time
balancing_index_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(component, condition_index) %>%
  summarise(n = n()
            )

balancing_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Balancing check: Condition index per environment

```{r}
# get percent correct over time
balancing_environment_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning"
         ) %>%
  group_by(condition_index, environment) %>%
  summarise(n = n()
            )

balancing_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

## Inclusion criterion: \>2 correct choices in each of last 4 state 1 visits

```{r}
# get last 4 choices per state
learning_state1_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 1) %>%
  group_by(ID, component) %>%
  slice_tail(n=4)

learning_state2_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 2) %>%
  group_by(ID, component) %>%
  slice_tail(n=4)

learning_state3_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 3) %>%
  group_by(ID, component) %>%
  slice_tail(n=4)

# who does not pass state 1 criterion
learning_state1_last4_correct_component_df <- learning_state1_last4_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_state_1))

learning_state1_last4_correct_component_df_excl <- learning_state1_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 2 criterion
learning_state2_last4_correct_component_df <- learning_state2_last4_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_state_2))

learning_state2_last4_correct_component_df_excl <- learning_state2_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 3 criterion
learning_state3_last4_correct_component_df <- learning_state3_last4_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_state_3))

learning_state3_last4_correct_component_df_excl <- learning_state3_last4_correct_component_df %>% 
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# excluded components
learning_last4_correct_component_df_excl <- rbind(learning_state1_last4_correct_component_df_excl,
                                          learning_state2_last4_correct_component_df_excl,
                                          learning_state3_last4_correct_component_df_excl)

learning_last4_correct_component_df_excl <- learning_last4_correct_component_df_excl %>%
  select(! sum_correct) %>%
  distinct()

excluded_components_a <- learning_state1_last4_correct_component_df_excl$ID_condition_combo

percent_component_excluded_a <- length(excluded_components_a)/nrow(learning_state1_last4_correct_component_df)

# excluded subjects
excluded_IDs_a <- unique(learning_state1_last4_correct_component_df_excl$ID)

percent_IDs_excluded_a <- length(excluded_IDs_a)/length(unique(trial_df$ID))
```

-   \% excluded components

```{r}
percent_component_excluded_a
```

-   \% excluded IDs

```{r}
percent_IDs_excluded_a
```

## Excluded components per condition

```{r}
learning_last4_correct_condition_df_excl <- learning_last4_correct_component_df_excl %>%
  group_by(condition) %>%
  summarise(n = n()
            )
  
learning_last4_correct_condition_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Excluded components per component index

```{r}
learning_last4_correct_component_index_df_excl <- learning_last4_correct_component_df_excl %>%
  group_by(condition_index) %>%
  summarise(n = n()
            )
  
learning_last4_correct_component_index_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Excluded components per environment

```{r}
learning_last4_correct_component_environment_df_excl <- learning_last4_correct_component_df_excl %>%
  group_by(environment) %>%
  summarise(n = n()
            )
  
learning_last4_correct_component_environment_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Alternative inclusion criterion: \>= 75% correct during learning overall

```{r}
# get choices per state
learning_state1_df <- trial_df %>%
  filter(phase == "learning",
         state == 1)

learning_state2_df <- trial_df %>%
  filter(phase == "learning",
         state == 2)

learning_state3_df <- trial_df %>%
  filter(phase == "learning",
         state == 3)

# who does not pass state 1 criterion
learning_state1_correct_component_df <- learning_state1_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(mean_correct = mean(correct_state_1))

learning_state1_correct_component_df_excl <- learning_state1_correct_component_df %>% 
  filter(mean_correct < 0.75) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 2 criterion
learning_state2_correct_component_df <- learning_state2_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(mean_correct = mean(correct_state_2))

learning_state2_correct_component_df_excl <- learning_state2_correct_component_df %>% 
  filter(mean_correct < 0.75) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# who does not pass state 3 criterion
learning_state3_correct_component_df <- learning_state3_df %>%
  group_by(ID, component, condition_index, condition, environment) %>%
  summarise(mean_correct = mean(correct_state_3))

learning_state3_correct_component_df_excl <- learning_state3_correct_component_df %>% 
  filter(mean_correct < 0.75) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# excluded components
learning_correct_component_df_excl <- rbind(learning_state1_correct_component_df_excl,
                                          learning_state2_correct_component_df_excl,
                                          learning_state3_correct_component_df_excl)

learning_correct_component_df_excl <- learning_correct_component_df_excl %>%
  select(! mean_correct) %>%
  distinct()

excluded_components_b <- learning_correct_component_df_excl$ID_condition_combo

percent_component_excluded_b <- length(excluded_components_b)/nrow(learning_state1_correct_component_df)

# how many subjects don't pass criterion in at least one condition
excluded_IDs_b <- unique(learning_correct_component_df_excl$ID)

percent_IDs_excluded_b <- length(excluded_IDs_b)/length(unique(trial_df$ID))
```

-   \% excluded components

```{r}
percent_component_excluded_b
```

-   \% excluded IDs

```{r}
percent_IDs_excluded_b
```

## Excluded components per condition

```{r}
learning_correct_condition_df_excl <- learning_correct_component_df_excl %>%
  group_by(condition) %>%
  summarise(n = n()
            )
  
learning_correct_condition_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Excluded components per component index

```{r}
learning_correct_component_index_df_excl <- learning_correct_component_df_excl %>%
  group_by(condition_index) %>%
  summarise(n = n()
            )
  
learning_correct_component_index_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Excluded components per environment

```{r}
learning_correct_component_environment_df_excl <- learning_correct_component_df_excl %>%
  group_by(environment) %>%
  summarise(n = n()
            )
  
learning_correct_component_environment_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Exclusion

```{r}
################ CHOOSE EXCLUSION CRITERION ####################################
################################################################################

excluded_components <- excluded_components_a # a or b
excluded_IDs <- excluded_IDs_a # a or b
```

```{r}
# # Exclude components from all dfs
# trial_df_excl <- trial_df %>%
#   mutate(ID_condition_combo = paste(ID, "-", condition, sep="")) %>%
#   filter(! ID_condition_combo %in% excluded_components)
# 
# component_df_excl <- component_df %>%
#   mutate(ID_condition_combo = paste(ID, "-", condition, sep="")) %>%
#   filter(! ID_condition_combo %in% excluded_components)
```

```{r}
# OR Exclude IDs from all dfs
trial_df_excl <- trial_df %>%
  filter(! ID %in% excluded_IDs)

component_df_excl <- component_df %>%
    filter(! ID %in% excluded_IDs)
```

```{r}
################ DF DEFINITION FOR RELEARNING & TEST ########################
#############################################################################

df <- trial_df_excl # trial_df, trial_df_excl

```

-   Further analyses based on n =

```{r}
length(unique(df$ID))
```

## Learning phase conclusions {.smaller}

-   overall **73,5% correct**
-   **increase** in correct choices over time (n trials, n conditions)
-   **comparable** performance across **conditions and environments**
-   47% of participants don't not meet relaxed **inclusion criterion**
    -   because **SR-TD cannot learn** when not starting from state 1?
    -   due to **exploration**?

## Implications for revised task design {.smaller}

-   **facilitate learning** by including a floorplan in the instructions & adding a saptial component (displaying states resulting from left choices on the left and from right choices on the right screen side)
-   **start all trials from state 1** (allow SR to learn)
-   introduce **forced choices** in states 1, 2, 3 & instruct to always choose better option when 2 choices available (limit exploration)

# Re-Learning Phase: Switches

## Re-learning phase conslusions

-   only measurable in transition re-learning (starts from states 2 and 3)
-   lower than in learning (fewer trials)

## Transition revaluation: Percent switch per state

```{r}
relearning_switch_state_df <- df %>%
  filter(phase == "relearning",
         state %in% c(2,3)
         ) %>%
  mutate(state = as.factor(state)) %>%
  group_by(component, state) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            ) #%>%
  #mutate(state=as.factor(state))

relearning_switch_state_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")

#knitr::kable(head(aggregate_learning_correct_df),format = "html")
```

## Transition revaluation: Percent switch per state {.smaller}

-   More than chance probability of choosing correctly

```{r}
# bar plot
ggplot(relearning_switch_state_df, aes(x=component, y=mean_switch, fill=state)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2,
                position=position_dodge(.9)) +
  theme_light() +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen'))

```

## Transition revaluation: Percent switch all states per condition index

```{r}
# get percent correct over time
relearning_switch_component_index_df <- df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "relearning",
         state %in% c(2,3)
         ) %>%
  group_by(component, condition_index) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

relearning_switch_component_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Transition revaluation: Percent switch all states per condition index {.smaller}

-   Comparable transition relearning performance in earlier and later components

```{r}
# bar plot
ggplot(relearning_switch_component_index_df, aes(x=condition_index, y=mean_switch, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## Transition revaluation: Percent switch all states per environment

```{r}
# get percent correct over time
relearning_switch_component_environment_df <- df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "relearning",
         state %in% c(2,3)
         ) %>%
  group_by(component, environment) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

relearning_switch_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Transition revaluation: Percent switch all states per environment {.smaller}

-   Transition relearning performance comparable across environments

```{r}
# bar plot
ggplot(relearning_switch_component_environment_df, aes(x=environment, y=mean_switch, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-0.3, 1)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## Re-learning phase conslusions

-   only measurable in transition re-learning (starts from states 2 and 3)
-   lower than in learning (fewer trials)

## Implications for revised task design

-   let **all re-learning trials across conditions start in states 4, 5, 6** --\> conditions more comparable

# Test Phase: Switches

## Test phase conclusions {.smaller}

-   \% switch in **control condition \< other conditions** --\> fundamental understanding of task!
-   **no differences** in % switch between reward, transition, and goal-state revaluation --\> why?
    -   transition revaluation induces larger change to state-action values
    -   transition revaluation starts from states 2 and 3 and is thus easier to integrate with learned environment

## Switches per component

```{r}
test_switch_component_df <- df %>%
  filter(phase == "test") %>%
  group_by(component) %>%
  summarise(n = n(),
            sum_switch = sum(switch, na.rm=T),
            percent_switch = mean(switch, na.rm=T),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3]
            )

test_switch_component_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Switches per component {.smaller}

-   Control as expected
-   transition better than expected
-   reward worse than expected
-   goal-state \< transition --\> suggests reduced SR use

```{r}
# bar plot
ggplot(test_switch_component_df, aes(x=component, y=percent_switch)) +
  geom_bar(stat="identity", fill="lightblue") +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-0.2, 1)) +
  theme_light()
```

## LogReg: Difference from control condition {.smaller}

-   Higher log odds of switching in every condition compared to control

```{r}
logreg_test_switch_condition_df <- df %>%
  filter(phase == "test") %>%
  mutate(switch = as.factor(switch),
         condition = as.factor(condition)) %>%
  select(ID,
         switch,
         condition)

contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(4, base = 1)

log_model_control <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## LogReg: Difference from goal-state condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(4, base = 2)

log_model_goalstate <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## LogReg: Difference from reward condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(4, base = 3)

log_model_reward <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## LogReg: Difference from transition condition

```{r}
contrasts(logreg_test_switch_condition_df$condition) <- contr.treatment(4, base = 4)

log_model_transition <- glm(switch ~ condition, data = logreg_test_switch_condition_df, family = "binomial")
tab_model(log_model_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Switches per condition index

```{r}
# get percent correct over time
test_switch_component_index_df <- df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "test"
         ) %>%
  group_by(component, condition_index) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3],
            n = n()
            )

test_switch_component_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## Switches per condition index

-   low n per cell

```{r}
# bar plot
ggplot(test_switch_component_index_df, aes(x=condition_index, y=mean_switch, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-2, 3)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## LogReg: Switches per accumulated state visits on task \* difference from control {.smaller}

-   condition effects on switch don't interact with time on task (no changes in strategy)

```{r}
logreg_test_switch_condition_accumulatedtrial_df <- df %>%
  filter(phase == "test") %>%
  mutate(switch = as.factor(switch),
         condition = as.factor(condition)) %>%
  select(ID,
         switch,
         condition,
         accumulated_states_visited)

contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(4, base = 1)

log_model_accumulated_states_visited_control <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")

tab_model(log_model_accumulated_states_visited_control, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

## LogReg: Switches per accumulated state visits on task \* difference from goal-state {.smaller}

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(4, base = 2)

log_model_accumulated_states_visited_goalstate <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_goalstate, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

## LogReg: Switches per accumulated state visits on task \* difference from reward {.smaller}

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(4, base = 3)

log_model_accumulated_states_visited_reward <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_reward, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

## LogReg: Switches per accumulated state visits on task \* difference from transition {.smaller}

```{r}
contrasts(logreg_test_switch_condition_accumulatedtrial_df$condition) <- contr.treatment(4, base = 4)

log_model_accumulated_states_visited_transition <- glm(switch ~ 1 + accumulated_states_visited*condition, data = logreg_test_switch_condition_accumulatedtrial_df, family = "binomial")
tab_model(log_model_accumulated_states_visited_transition, transform = NULL, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 10;'))
```

## Switches per environment

```{r}
# get percent correct over time
test_switch_component_environment_df <- df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "test"
         ) %>%
  group_by(component, environment) %>%
  summarise(mean_switch = mean(switch, na.rm = TRUE),
            se_switch = sd(switch, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(switch, na.rm=TRUE)[2],
            ci_u = ci(switch, na.rm=TRUE)[3],
            n = n())

test_switch_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## Switches per environment

-   low n per cell

```{r}
# bar plot
ggplot(test_switch_component_environment_df, aes(x=environment, y=mean_switch, fill=component)) +
  geom_bar(stat="identity", position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l, ymax=ci_u), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(-2, 2.5)) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))

```

## Test phase conclusions {.smaller}

-   \% switch in **control condition \< other conditions** --\> fundamental understanding of task!
-   **no differences** in % switch between reward, transition, and goal-state revaluation --\> why?
    -   transition revaluation induces larger change to state-action values
    -   transition revaluation starts from states 2 and 3 and is thus easier to integrate with learned environment
-   every participant performs every condition **only once** and the test phase choice serves as the **only binary indicator** of switching preference for state 1 actions

## Implications for revised task design {.smaller}

-   adapt **reward sizes** so that reward, transition, and goal-state revaluation induce equivalent changes to values of the state 1 actions (currently larger change in transition revaluation)

-   let **all re-learning trials start from states 4, 5, 6**

-   introduce **5 test trials** from state 1 to state 2/3 to get a better impression of preferences

-   after test trials: ask participants to **rate to how much reward each state 1/2/3 action will lead --\>** dimensional score for preference switch, useful to relate to psychiatric symptom dimensions

## Summary: Revised task design {.smaller}

-   **facilitate learning**: floorplan in instructions, adding saptial component

-   start **all learning trials from state 1** (allow SR to learn)

-   introduce **forced choices** in states 1, 2, 3 & instruct to always choose better option when 2 choices available (limit exploration)

-   let **all re-learning trials start from states 4, 5, 6** (thanks to revised transition revaluation)

-   Adapt **reward sizes** so that reward, transition, and goal-state revaluation induce equivalent changes to values of the state 1 actions

-   after test: **rating all state 1/2/3 actions** --\> dimensional score for preference switch, useful to relate to psychiatric symptom dimensions

# Reaction times

## RT per condition and phase

```{r}
RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "control-test",
                          "reward-learning",
                          "reward-relearning",
                          "reward-test",
                          "transition-learning",
                          "transition-relearning",
                          "transition-test",
                          "goal-state-learning",
                          "goal-state-relearning",
                          "goal-state-test")) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## RT per condition and phase {.smaller}

-   slower RT in test trial (2-choice state only)

```{r}
ggplot(df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```

## RT in 2-choice states per condition and phase

```{r}
twochoice_RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3)) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

twochoice_RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## RT in 2-choice states per condition and phase {.smaller}

-   slower in test trial
-   fastest in test control

```{r}
twochoice_RT_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-test",
                          "reward-learning",
                          "reward-test",
                          "transition-learning",
                          "transition-test",
                          "goal-state-learning",
                          "goal-state-test"),
         state %in% c(1,2,3))

ggplot(twochoice_RT_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```

## RT in 1-choice states per condition and phase

```{r}
onechoice_RT_condition_phase_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "reward-learning",
                          "reward-relearning",
                          "transition-learning",
                          "transition-relearning",
                          "goal-state-learning",
                          "goal-state-relearning"),
         !state %in% c(1,2,3)) %>%
  group_by(condition, phase) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

onechoice_RT_condition_phase_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## RT in 1-choice states per condition and phase {.smaller}

-   comparable across learning and re-learning

```{r}
onechoice_RT_df <- df %>%
  filter(component %in% c("control-learning",
                          "control-relearning",
                          "reward-learning",
                          "reward-relearning",
                          "transition-learning",
                          "transition-relearning",
                          "goal-state-learning",
                          "goal-state-relearning"),
         !state %in% c(1,2,3))

ggplot(onechoice_RT_df, aes(x=phase, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```

## Learning RT in 2-choice states - correct choice

```{r}
learning_twochoice_RT_condition_phase_correct_df <- df %>%
  filter(component %in% c("control-learning",
                          "reward-learning",
                          "transition-learning",
                          "goal-state-learning"),
         state %in% c(1,2,3)) %>%
  group_by(condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

learning_twochoice_RT_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## Learning RT in 2-choice states - correct choice {.smaller}

-   minimally faster in correct choices

```{r}
learning_twochoice_RT_df <- df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(component %in% c("control-learning",
                          "reward-learning",
                          "transition-learning",
                          "goal-state-learning"),
         state %in% c(1,2,3))

ggplot(learning_twochoice_RT_df, aes(x=phase, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```

## Test RT - correct choice {.smaller}

```{r}
test_RT_condition_phase_correct_df <- df %>%
  filter(component %in% c("control-test",
                          "reward-test",
                          "transition-test",
                          "goal-state-test"),
         state %in% c(1,2,3)) %>%
  group_by(condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

test_RT_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

## Test RT - correct choice {.smaller}

-   control: faster in correct choices
-   transition revaluation: minimally faster in incorrect choices

```{r}
test_RT_df <- df %>%
  mutate(switch = as.factor(switch)) %>%
  filter(component %in% c("control-test",
                          "reward-test",
                          "transition-test",
                          "goal-state-test"))

ggplot(test_RT_df, aes(x=condition, y=RT, fill = c(switch))) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  theme_light() +
  scale_fill_manual(values=c('lightblue','#E69F00','seagreen','grey'))
```
