---
title: "Reduced Successor Representation in AUD"
subtitle: "Conformatory and exploratory behavioral data analyses"
doi: "https://doi.org/10.17605/OSF.IO/9TUZE"
author: "Milena Musial"
date: 09/25/2024
format: html
editor: visual
toc: TRUE
code-fold: TRUE
number-sections: TRUE
embed-resources: true
execute: 
  warning: FALSE
editor_options: 
  chunk_output_type: console
---

# Set up

```{r}
rm(list = ls(all = TRUE))

# Load packages
packages <- c("ggplot2", "dplyr", "tidyr", "kableExtra", "gmodels", "lme4", "sjPlot", "viridis", "forcats", "lmerTest", "car", "performance")
#install.packages(packages)
sapply(packages, require, character.only = TRUE)

# set color scheme

# define paths
data_path <- "~/work/group_folder/B01_FP2_WP3/WP3_DATA/FINAL_STUDY/RDFs"
#data_path <- "~/Library/CloudStorage/OneDrive-Charité-UniversitätsmedizinBerlin/PhD/04_B01/WP3/WP3_DATA/FINAL_STUDY/RDFs"

# read dfs
load(file.path(data_path, "final_data_included.RData"))
load(file.path(data_path, "demo_psych_data_included.RData"))

```

# Select continuous predictor to be used in all analyses

```{r}
predictor <- "aud_sum"

if (predictor == "audit_sum_pre") {
  
  trial_df <- trial_df %>%
    mutate(predictor = audit_sum_pre,
           group_new = group)
  
  component_df <- component_df %>%
    mutate(predictor = audit_sum_pre,
           group_new = group)
  
  rating_df <- rating_df %>%
    mutate(predictor = audit_sum_pre,
           group_new = group)
  
  demo_psych <- demo_psych %>%
    mutate(predictor = audit_sum_pre,
           group_new = group)
    
} else if (predictor == "aud_sum") {
  
  trial_df <- trial_df %>%
    mutate(predictor = aud_sum,
           group_new = aud_group)
  
  component_df <- component_df %>%
    mutate(predictor = aud_sum,
           group_new = aud_group)
  
  rating_df <- rating_df %>%
    mutate(predictor = aud_sum,
           group_new = aud_group)
  
  demo_psych <- demo_psych %>%
    mutate(predictor = aud_sum,
           group_new = aud_group)
  
} else if (predictor == "casa_gf_unaware") {
  
  trial_df <- trial_df %>%
    mutate(predictor = casa_gf_unaware) %>%
    mutate(group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  component_df <- component_df %>%
    mutate(predictor = casa_gf_unaware) %>%
    mutate(group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  rating_df <- rating_df %>%
    mutate(predictor = casa_gf_unaware) %>%
    mutate(group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  demo_psych <- demo_psych %>%
    mutate(predictor = casa_gf_unaware) %>%
    mutate(group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
} else if (predictor == "casa_gf_nonvolitional") {
  
  trial_df <- trial_df %>%
    mutate(predictor = casa_gf_nonvolitional,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  component_df <- component_df %>%
    mutate(predictor = casa_gf_nonvolitional,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  rating_df <- rating_df %>%
    mutate(predictor = casa_gf_nonvolitional,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  demo_psych <- demo_psych %>%
    mutate(predictor = casa_gf_nonvolitional,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))

} else if (predictor == "uppsp_total") {
  
  trial_df <- trial_df %>%
    mutate(predictor = uppsp_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  component_df <- component_df %>%
    mutate(predictor = uppsp_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  rating_df <- rating_df %>%
    mutate(predictor = uppsp_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  demo_psych <- demo_psych %>%
    mutate(predictor = uppsp_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
} else if (predictor == "oci_total") {
  
  trial_df <- trial_df %>%
    mutate(predictor = oci_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  component_df <- component_df %>%
    mutate(predictor = oci_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  rating_df <- rating_df %>%
    mutate(predictor = oci_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
  demo_psych <- demo_psych %>%
    mutate(predictor = oci_total,
           group_new = case_when(predictor >= mean(predictor) ~ "High scores",
                               predictor < mean(predictor) ~ "Low scores")) %>%
    mutate(group_new = factor(group_new, levels= c("Low scores", "High scores")))
  
}

```

# Test Phase

## Main analysis

### Plots

#### Performance per condition, group, version

```{r}
test_correct_paths_group_version_condition_df <- trial_df %>%
  filter(phase == "test",
         state %in% c(1)
         ) %>%
  group_by(group_new, version, condition) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

test_correct_paths_group_version_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")

```

```{r}

# bar plot

ggplot(test_correct_paths_group_version_condition_df, aes(x=condition, y=mean_correct*100)) +
  geom_bar(stat="identity", aes(fill = condition)) +
  geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100),
                width=.2,
                position=position_dodge(.9)) +
  facet_grid(vars(group_new), vars(version)) +
  scale_y_continuous("% Correct paths", limits = c(0, 105)) +
  theme_light(base_size = 16) +
  theme(legend.position = "none",
        axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis(option = "viridis", discrete = TRUE)

```

#### Environment effects

```{r}

# get percent correct over time
test_path_component_environment_df <- trial_df %>%
  mutate(environment = as.factor(environment)) %>%
  filter(phase == "test",
         state == 1
         ) %>%
  group_by(version, group_new, condition, environment) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n())

test_path_component_environment_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")

```

```{r}

# bar plot

ggplot(test_path_component_environment_df, aes(x=environment, y=mean_correct*100, fill=condition)) +
  geom_bar(stat="identity", aes(fill=condition), position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 105)) +
  facet_grid(vars(group_new), vars(version), scales = "free_x") +
  xlab("Environment") +
  ylab("% Correct paths") +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis(option = "viridis", discrete = TRUE)

```

### Logistic regression (as preregistered + identify optimal random effects structure + test version effects)

```{r}

# Prepare LogReg dfs

logreg_test_path_predictor_version_condition_df_full <- trial_df %>%
  filter(phase == "test",
         state == 1) %>%
  mutate(condition = as.factor(condition),
         version = as.factor(version),
         environment = as.factor(environment)) %>%
  select(predictor,
         version,
         ID,
         correct_path,
         condition,
         environment)

logreg_test_path_condition_df_lowscores_control <- trial_df %>%
  filter(phase == "test",
         state == 1,
         group %in% c("Low-risk drinkers", "Low scores", "no"),
         version == "Monetary version") %>%
  mutate(condition = as.factor(condition),
         environment = as.factor(environment)) %>%
  select(ID,
         correct_path,
         condition,
         environment)

logreg_test_path_predictor_condition_df_alcohol <- trial_df %>%
  filter(phase == "test",
         state == 1,
         version == "Alcohol version") %>%
  mutate(condition = as.factor(condition),
         environment = as.factor(environment)) %>%
  select(predictor,
         ID,
         correct_path,
         condition,
         environment)

```

#### Model 1: Low-risk drinkers, control version, compare against transition revaluation

> **Hypothesis 1:** **Main effect of condition (reward vs. transition revaluation, goal-state vs. transition revaluation)**

> Low-risk drinkers use SR to some extent when learning in a non-alcohol context. Specifically, we expect more correct test phase paths in the reward revaluation and the goal-state revaluation conditions compared to the transition revaluation condition, respectively.

```{r}

contrasts(logreg_test_path_condition_df_lowscores_control$environment) <- contr.sum(5)
contrasts(logreg_test_path_condition_df_lowscores_control$condition) <- contr.treatment(5, base = 3)

model1 <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model1_rs <- glmer(correct_path ~ condition + (1 + condition | ID), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model1_rs_env_i <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 | environment), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model1_rs_env_rs <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model1, model1_rs, model1_rs_env_i, model1_rs_env_rs)

tab_model(model1_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model1_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model1_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

check_model(model1_rs, check=c("pp_check", "reqq", "qq"))
```

#### Model 2: Low-risk drinkers, control version, compare against policy revaluation

> **Hypothesis 2:** **Main effect of condition (reward vs. policy revaluation, goal-state vs. policy revaluation)**

> The differences between reward and transition revaluation and between goal-state and transition revaluation cannot fully be explained by use of a model-based strategy with a higher learning rate for the reward compared to the transition structure. Specifically, we expect fewer correct test phase paths in the policy revaluation condition compared to the reward and goal-state revaluation conditions, respectively.

```{r}

contrasts(logreg_test_path_condition_df_lowscores_control$environment) <- contr.sum(5)
contrasts(logreg_test_path_condition_df_lowscores_control$condition) <- contr.treatment(5, base = 4)

model2 <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model2_rs <- glmer(correct_path ~ condition + (1 + condition | ID), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model2_rs_env_i <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 | environment), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model2_rs_env_rs <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model2, model2_rs, model2_rs_env_i, model2_rs_env_rs)

tab_model(model2_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model2_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model2_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

check_model(model2_rs, check=c("pp_check", "reqq", "qq"))
```

Did individuals who explored more during learning phase perform better in policy revaluation (more positive slopes)?

```{r}

# extract individual slopes for condition (contrast reward vs. policy)

individual_slopes <- coef(model2_rs)$ID[,2]

# calculate how often suboptimal path was taken during learning

exploration_df <- trial_df %>%
  filter(group %in% c("Low-risk drinkers", "Low scores", "no"),
         version == "Monetary version",
         condition == "Policy revaluation",
         phase == "learning") %>%
  filter(! trial %in% c(1,2,3,4)) %>%
  group_by(ID, trial) %>%
  mutate(least_optimal_path = case_when((state == 1 & correct == 0 & lead(correct) == 0) ~ 1, # incorrect state 1 and second stage choice
                                  (state == 1 & correct == 1) ~ 0, # correct state 1 choice
                                  (state == 1 & lead(correct) == 1) ~ 0), # correct second stage choice
         suboptimal_path = case_when((state == 1 & correct == 0) ~ 1, # incorrect state 1 choice
                                  (state == 1 & lead(correct) == 0) ~ 1, # incorrect second stage choice
                                  (state == 1 & correct == 1 & lead(correct) == 1) ~ 0,)) %>%  # correct state 1 and incorrect second stage choice)
  filter(state == 1) %>%
  group_by(ID) %>%
  mutate(percent_least_optimal_path = mean(least_optimal_path),
         percent_exploration = mean(suboptimal_path)) %>%
  select(ID, percent_least_optimal_path, percent_exploration) %>%
  unique()

exploration_df$individual_slope <- individual_slopes

cor.test(exploration_df$percent_least_optimal_path, exploration_df$individual_slope)
cor.test(exploration_df$percent_exploration, exploration_df$individual_slope)

ggplot(exploration_df, aes(x=percent_least_optimal_path, y=individual_slope)) +
  geom_point(aes(y=individual_slope)) +
  scale_y_continuous("Slope reward vs. policy") +
  scale_x_continuous("% Least optimal path during learning") +
  theme_light(base_size = 16)

ggplot(exploration_df, aes(x=percent_exploration, y=individual_slope)) +
  geom_point(aes(y=individual_slope)) +
  geom_smooth() +
  scale_y_continuous("Slope reward vs. policy") +
  scale_x_continuous("% Exploration during learning") +
  theme_light(base_size = 16)

```

#### Model 3: Full dataset, compare against transition revaluation

> **Hypothesis 3:** **Interaction of condition (reward vs. transition revaluation) \* group (harmful vs. low-risk drinkers)**

> Individuals with harmful alcohol use (harmful drinkers) show a higher degree of SR use compared to individuals with low-risk alcohol use (low-risk drinkers). Specifically, we expect more correct test phase paths in the reward revaluation condition compared to the transition revaluation condition for harmful drinkers compared to low-risk drinkers.

> **Hypothesis 4:** **Interaction of condition (reward vs. transition revaluation) \* group (harmful vs. low-risk drinkers) \* context (alcohol vs. non-alcohol)**

> Harmful drinkers show a higher degree of SR use compared to low-risk drinkers when learning in an alcohol compared to a non-alcohol context. Specifically, we expect more correct test phase paths in the reward revaluation compared to the transition revaluation condition for harmful drinkers compared to low-risk drinkers in the alcohol compared to the non-alcohol task version.

```{r}

contrasts(logreg_test_path_predictor_version_condition_df_full$environment) <- contr.sum(10)
contrasts(logreg_test_path_predictor_version_condition_df_full$condition) <- contr.treatment(5, base = 3)

# create model matrices

mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_predictor_version_condition_df_full)
version_alc <- mm_version[,2] # version alc compared to version monetary

mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_predictor_version_condition_df_full)
condition_control <- mm_condition[,5] # condition control compared to transition
condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
condition_policy <- mm_condition[,4] # condition policy compared to transition
condition_reward <- mm_condition[,2] # condition reward compared to transition

model3 <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model3_rs <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 + condition_control + condition_goalstate + condition_policy + condition_reward | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model3_rs_env_i <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 + condition_control + condition_goalstate + condition_policy + condition_reward | ID) + (1 | environment),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model3_rs_env_rs <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc
                  + (1 + condition_control + condition_goalstate + condition_policy + condition_reward | ID)
                  + (1 + condition_control + condition_goalstate + condition_policy + condition_reward | environment),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model3, model3_rs, model3_rs_env_i, model3_rs_env_rs)

tab_model(model3_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model3_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model3_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

check_model(model3_rs, check=c("pp_check", "reqq", "qq"))

model3_rs_vers <- glmer(correct_path ~
                  predictor*version*condition +
                  (1 + condition | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model3_rs, model3_rs_vers)

tab_model(model3_rs_vers, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

check_model(model3_rs_vers, check=c("pp_check", "reqq", "qq"))
```

#### Model 4: Alcohol context, compare against reward revaluation

> **Hypothesis 5: Interaction of condition (goal-state vs. reward revaluation) \* group (harmful vs. low-risk drinkers)**

> Harmful drinkers show a higher degree of rigid goal-based reduced SR use when learning in an alcohol context compared to low-risk drinkers. Specifically, we expect less correct test phase paths in the goal-state compared to the reward revaluation condition for harmful drinkers compared to low-risk drinkers.

```{r}

contrasts(logreg_test_path_predictor_condition_df_alcohol$environment) <- contr.sum(5)
contrasts(logreg_test_path_predictor_condition_df_alcohol$condition) <- contr.treatment(5, base = 1)

model4 <- glmer(correct_path ~ condition*predictor + (1 | ID), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model4_rs <- glmer(correct_path ~ condition*predictor + (1 + condition | ID), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model4_rs_env_i <- glmer(correct_path ~ condition*predictor + (1 + condition | ID) + (1 | environment), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model4_rs_env_rs <- glmer(correct_path ~ condition*predictor + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model4, model4_rs, model4_rs_env_i, model4_rs_env_rs)

tab_model(model4_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model4_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model4_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

```

#### Model 5: Full dataset, compare against reward revaluation

> **Hypothesis 6: Interaction of condition (goal-state vs. reward revaluation) \* group (harmful vs. low-risk drinkers) \* context (alcohol vs. non-alcohol)**

> Harmful drinkers show a higher degree of rigid goal-based reduced SR use compared to low-risk drinkers when learning in an alcohol compared to a non-alcohol context. Specifically, we expect less correct test phase paths in the goal-state compared to the reward revaluation condition for harmful drinkers compared to low-risk drinkers in the alcohol compared to the non-alcohol task version.

```{r}

contrasts(logreg_test_path_predictor_version_condition_df_full$environment) <- contr.sum(10)
contrasts(logreg_test_path_predictor_version_condition_df_full$condition) <- contr.treatment(5, base = 1)

# create model matrices

mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_predictor_version_condition_df_full)
version_alc <- mm_version[,2] # version alc compared to version monetary

mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_predictor_version_condition_df_full)
condition_control <- mm_condition[,5] # condition control compared to reward
condition_goalstate <- mm_condition[,2] # condition goalstate compared to reward
condition_policy <- mm_condition[,4] # condition policy compared to reward
condition_transition <- mm_condition[,3] # condition transition compared to reward

model5 <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_transition + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_transition:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_transition:predictor:version_alc +
                  (1 | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optCtrl=list(maxfun=1e6),
                             optimizer = "bobyqa"))

model5_rs <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_transition + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_transition:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_transition:predictor:version_alc +
                  (1 + condition_control + condition_goalstate + condition_policy + condition_transition | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optCtrl=list(maxfun=1e6),
                             optimizer = "bobyqa"))

model5_rs_env_i <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_transition + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_transition:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_transition:predictor:version_alc +
                  (1 + condition_control + condition_goalstate + condition_policy + condition_transition | ID)
                  + (1 | environment),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optCtrl=list(maxfun=1e6),
                             optimizer = "bobyqa"))

model5_rs_env_rs <- glmer(correct_path ~
                  condition_control + condition_goalstate + condition_policy + condition_transition + predictor +
                  condition_control:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_transition:predictor +
                  condition_control:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_transition:predictor:version_alc +
                  (1 + condition_control + condition_goalstate + condition_policy + condition_transition | ID)
                  + (1 + condition_control + condition_goalstate + condition_policy + condition_transition | environment),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optCtrl=list(maxfun=1e6),
                             optimizer = "bobyqa"))

anova(model5, model5_rs, model5_rs_env_i, model5_rs_env_rs)

tab_model(model5_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model5_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model5_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

check_model(model5_rs, check=c("pp_check", "reqq", "qq"))

model5_rs_vers <- glmer(correct_path ~
                  predictor*version*condition +
                  (1 + condition | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optCtrl=list(maxfun=1e6),
                             optimizer = "bobyqa"))

tab_model(model5_rs_vers, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

check_model(model5_rs_vers, check=c("pp_check", "reqq", "qq"))
```

#### Compare to control condition

##### Model 1: Low-risk drinkers, control version, compare against control condition

```{r}

contrasts(logreg_test_path_condition_df_lowscores_control$condition) <- contr.treatment(5, base = 5)

model1_control <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model1_control_rs <- glmer(correct_path ~ condition + (1 + condition | ID), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model1_control_rs_env_i <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 | environment), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model1_control_rs_env_rs <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_condition_df_lowscores_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model1_control, model1_control_rs, model1_control_rs_env_i, model1_control_rs_env_rs)

tab_model(model1_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model1_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model1_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

```

##### Model 3: Full dataset, compare against control condition

-   Lower performance in all conditions

```{r}

contrasts(logreg_test_path_predictor_version_condition_df_full$condition) <- contr.treatment(5, base = 5)

# create model matrices
mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_predictor_version_condition_df_full)
version_alc <- mm_version[,2] # version alc compared to version monetary

mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_predictor_version_condition_df_full)
condition_transition <- mm_condition[,4] # condition control compared to transition
condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition
condition_policy <- mm_condition[,5] # condition policy compared to transition
condition_reward <- mm_condition[,2] # condition reward compared to transition

model3_control <- glmer(correct_path ~
                  condition_transition + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_transition:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_transition:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa",
                             optCtrl=list(maxfun=1e6)))

model3_control_rs <- glmer(correct_path ~
                  condition_transition + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_transition:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_transition:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa",
                             optCtrl=list(maxfun=1e6)))

model3_control_rs_env_i <- glmer(correct_path ~
                  condition_transition + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_transition:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_transition:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | ID)
                  + (1 | environment),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa",
                             optCtrl=list(maxfun=1e6)))

model3_control_rs_env_rs <- glmer(correct_path ~
                  condition_transition + condition_goalstate + condition_policy + condition_reward + predictor +
                  condition_transition:predictor + condition_goalstate:predictor +
                  condition_policy:predictor + condition_reward:predictor +
                  condition_transition:predictor:version_alc + condition_goalstate:predictor:version_alc +
                  condition_policy:predictor:version_alc + condition_reward:predictor:version_alc +
                  (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | ID)
                  + (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | environment),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa",
                             optCtrl=list(maxfun=1e6)))

anova(model3_control, model3_control_rs, model3_control_rs_env_i, model3_control_rs_env_rs)

tab_model(model3_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model3_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model3_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

model3_control_rs_vers <- glmer(correct_path ~
                  predictor*version*condition +
                  (1 + condition | ID),
                data = logreg_test_path_predictor_version_condition_df_full,
                family = "binomial",
                glmerControl(optimizer = "bobyqa",
                             optCtrl=list(maxfun=1e6)))

anova(model3_control_rs, model3_control_rs_vers)

tab_model(model3_control_rs_vers, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

```

##### Model 4: Alcohol context, compare against reward revaluation

```{r}

contrasts(logreg_test_path_predictor_condition_df_alcohol$condition) <- contr.treatment(5, base = 5)

model4_control <- glmer(correct_path ~ condition*predictor + (1 | ID), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model4_control_rs <- glmer(correct_path ~ condition*predictor + (1 + condition | ID), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model4_control_rs_env_i <- glmer(correct_path ~ condition*predictor + (1 + condition | ID) + (1 | environment), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

model4_control_rs_env_rs <- glmer(correct_path ~ condition*predictor + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_predictor_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6)))

anova(model4_control, model4_control_rs, model4_control_rs_env_i, model4_control_rs_env_rs)

tab_model(model4_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model4_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
#tab_model(model4_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))

```
