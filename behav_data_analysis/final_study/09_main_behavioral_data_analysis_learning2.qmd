---
title: "Reduced Successor Representation in AUD"
subtitle: "Conformatory and exploratory behavioral data analyses"
doi: "https://doi.org/10.17605/OSF.IO/9TUZE"
author: "Milena Musial"
date: 09/25/2024
format: html
editor: visual
toc: TRUE
code-fold: TRUE
number-sections: TRUE
embed-resources: true
execute: 
  warning: FALSE
editor_options: 
  chunk_output_type: console
---

# Set up

```{r}
rm(list = ls(all = TRUE))

# Load packages
packages <- c("ggplot2", "dplyr", "tidyr", "kableExtra", "gmodels", "lme4", "sjPlot", "viridis", "forcats", "lmerTest", "car")
#install.packages(packages)
sapply(packages, require, character.only = TRUE)

# set color scheme

# define paths
data_path <- "~/work/group_folder/B01_FP2_WP3/WP3_DATA/FINAL_STUDY/RDFs"

# read dfs
load(file.path(data_path, "final_data_complete.RData"))
load(file.path(data_path, "demo_psych_data.RData"))

# format demo_psych df factors
# rename & reorder
demo_psych <- demo_psych %>%
  mutate(version = case_when(
    version == "alcohol" ~ "Alcohol version",
    version == "control" ~ "Monetary version"
  ),
  group = case_when(
    group == "harmful" ~ "Harmful drinkers",
    group == "low-risk" ~ "Low-risk drinkers"
  ))%>%
  mutate(version = fct_relevel(version,
                               c("Monetary version",
                                 "Alcohol version")),
         group = fct_relevel(group,
                             c("Low-risk drinkers",
                               "Harmful drinkers")))

```

# Exclusion

## Complete sample

```{r}
summary <- trial_df %>%
  select(ID, group, version)

summary <- unique(summary)

summary <- summary %>%
  group_by(group, version) %>%
  summarise(n = n())

summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Preregistered exclusion criterion 1: Inconsistent AUDIT scores

```{r}
audit_inconsistent_df <- demo_psych %>%
  select(prolific_ID, group, version, audit_sum_pre, audit_sum_post) %>%
  mutate(audit_consistent = ifelse(((audit_sum_pre > 7 & audit_sum_post > 7) | (audit_sum_pre < 8 & audit_sum_post < 8)), 1, 0)) %>%
  filter(audit_consistent == 0) %>%
  arrange(group, version)
```

### Percent excluded

```{r}
percent_IDs_excluded <- length(unique(audit_inconsistent_df$prolific_ID))/length(demo_psych$prolific_ID)
percent_IDs_excluded*100
```

### Excluded subjects per group and version

```{r}
audit_inconsistent_df_summary <- audit_inconsistent_df %>%
  group_by(group, version) %>%
  summarise(n = n())

audit_inconsistent_df_summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Apply exclusion

```{r}
trial_df <- trial_df %>%
  filter(! ID %in% audit_inconsistent_df$prolific_ID,
         preserve = TRUE)

component_df <- component_df %>%
  filter(! ID %in% audit_inconsistent_df$prolific_ID,
         preserve = TRUE)

rating_df <- rating_df %>%
  filter(! ID %in% audit_inconsistent_df$prolific_ID,
         preserve = TRUE)

demo_psych <- demo_psych %>%
  filter(! prolific_ID %in% audit_inconsistent_df$prolific_ID,
         preserve = TRUE)
```

## Preregistered exclusion criterion 2: Correct path taken in less than 3 out of the last 5 learning phase trials in any of the 5 conditions

```{r}
# get last paths
learning_paths_last4_df <- trial_df %>%
  filter(phase == "learning",
         state == 1) %>%
  group_by(ID, component) %>%
  slice_tail(n=5)

# who does not pass criterion
learning_paths_last4_correct_component_df <- learning_paths_last4_df %>%
  group_by(ID, group, version, component, condition_index, condition, environment) %>%
  summarise(sum_correct = sum(correct_path))

learning_paths_last4_correct_component_df_excl <- learning_paths_last4_correct_component_df %>%
  filter(sum_correct < 3) %>%
  mutate(ID_condition_combo = paste(ID, "-", condition, sep=""))

# excluded components
learning_paths_last4_correct_component_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  select(! sum_correct) %>%
  distinct()

excluded_components <- learning_paths_last4_correct_component_df_excl$ID_condition_combo

percent_component_excluded <- length(excluded_components)/nrow(learning_paths_last4_correct_component_df)

# excluded subjects
excluded_IDs <- unique(learning_paths_last4_correct_component_df_excl$ID)

percent_IDs_excluded <- length(excluded_IDs)/length(unique(trial_df$ID))
```

### Percent excluded

-   \% excluded IDs

```{r}
percent_IDs_excluded*100
```

### Excluded participants per group and version

```{r}
learning_paths_last4_correct_subject_df_excl_summary <- learning_paths_last4_correct_component_df_excl %>%
  ungroup() %>%
  select(ID, group, version) %>%
  distinct() %>%
  group_by(group, version) %>%
  summarise(n = n())

learning_paths_last4_correct_subject_df_excl_summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per group and version

```{r}
learning_correct_group_version_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(group, version) %>%
  summarise(n = n()
            )

learning_correct_group_version_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per condition

```{r}
learning_correct_condition_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(condition) %>%
  summarise(n = n()
            )

learning_correct_condition_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per component index

```{r}
learning_correct_component_index_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(condition_index) %>%
  summarise(n = n()
            )

learning_correct_component_index_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Excluded components per environment

```{r}
learning_correct_component_environment_df_excl <- learning_paths_last4_correct_component_df_excl %>%
  group_by(environment) %>%
  summarise(n = n()
            )

learning_correct_component_environment_df_excl %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

### Apply exclusion

```{r}
trial_df <- trial_df %>%
  filter(! ID %in% excluded_IDs,
         preserve = TRUE) %>%
  arrange(ID,
          condition_index,
          phase,
          trial,
          state_index)

component_df <- component_df %>%
  filter(! ID %in% excluded_IDs,
         preserve = TRUE)

rating_df <- rating_df %>%
  filter(! ID %in% excluded_IDs,
         preserve = TRUE)

demo_psych <- demo_psych %>%
  filter(! prolific_ID %in% excluded_IDs,
         preserve = TRUE)
```

## Further analyses based on (according to preregistered criteria)

```{r}
summary <- trial_df %>%
  select(ID, group, version)

summary <- unique(summary)

summary <- summary %>%
  group_by(group, version) %>%
  summarise(n = n())

summary %>%
  kable("html") %>%
  kable_styling(font_size = 18,
                latex_options = "scale_down")
```

## Balancing checks

### Condition index per condition

```{r}
# get percent correct over time
balancing_df <- component_df %>%
  mutate(condition_index = as.factor(condition_index),
         condition = as.factor(condition)) %>%
  filter(phase == "learning"
         ) %>%
  filter(! condition == "other") %>%
  droplevels() %>%
  unique() %>%
  select(ID, group, version, condition, condition_index, environment)

index_summary <- balancing_df %>%
  group_by(group, version, condition, condition_index) %>%
  summarise(n = n()
            )
index_summary %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
ggplot(balancing_df, aes(x=condition, fill=condition_index)) +
  geom_bar() +
  geom_text(stat = "count", aes(label = ..count..),
            position = position_stack(vjust = 0.5), size = 4) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis(option = "plasma", discrete = TRUE)
```

```{r}
# Chi-square test
index_table <- balancing_df %>%
  filter(group == "harmful" & version == "alcohol")

chisq.test(table(index_table$condition, index_table$condition_index))
```

### Environment per condition

```{r}
# get percent correct over time
environment_summary <- balancing_df %>%
  group_by(group, version, condition, environment) %>%
  summarise(n = n()
            )

environment_summary %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
balancing_df %>%
  ggplot(aes(x=condition, fill=environment)) +
  geom_bar() +
  geom_text(stat = "count", aes(label = ..count..),
            position = position_stack(vjust = 0.5), size = 4) +
  facet_grid(vars(group), vars(version), scales = "free_x") +
  theme_light(base_size = 16) +
  theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis(option = "turbo", discrete = TRUE)
```

```{r}
# Chi-square test
env_table <- balancing_df %>%
  filter(group == "low-risk" & version == "alcohol") %>%
  droplevels()

chisq.test(table(env_table$condition, env_table$environment), simulate.p.value = F)
```

## Overview of current AUDIT scores

```{r}
# calculate
demo_psych <- demo_psych %>%
  mutate(audit_pre = as.numeric(audit_sum_pre),
         audit_post = as.numeric(audit_sum_post),
         audit_mean = as.numeric(audit_sum_mean))

audit_df <- demo_psych %>%
  select(prolific_ID, group, version, audit_mean)

audit_df_summary <- audit_df %>%
  group_by(group, version) %>%
  summarise(mean_audit = mean(audit_mean, na.rm = TRUE),
            se_audit = sd(audit_mean, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(audit_mean, na.rm=TRUE)[2],
            ci_u = ci(audit_mean, na.rm=TRUE)[3],
            n = n()
            )

audit_df_summary %>%
  kable("html") %>%
  kable_styling(font_size = 12,
                latex_options = "scale_down")
```

```{r}
ggplot(audit_df, aes(x=group, y=audit_mean)) +
  geom_boxplot(aes(fill = group)) +
  scale_y_continuous(labels = scales::comma) +
  xlab("") +
  ylab("AUDIT score") +
  facet_wrap(~ version) +
  theme_light(base_size = 16) +
  theme(legend.position = "none",
        axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis(option = "plasma", discrete = TRUE)
```

```{r}
lm_audit <- lm(audit_mean ~ group*version,
               data = audit_df)

tab_model(lm_audit, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

# Learning Phase

<!-- ## Main analysis -->

<!-- ### Plots -->

<!-- #### Performance per group, version -->

<!-- ```{r} -->
<!-- learning_paths_group_version_df <- trial_df %>% -->
<!--   filter(phase == "learning", -->
<!--          state %in% c(1) -->
<!--          ) %>% -->
<!--   group_by(group, version) %>% -->
<!--   summarise(mean_correct = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n() -->
<!--             ) -->

<!-- learning_paths_group_version_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 12, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- #### Performance per group, version, condition -->

<!-- ```{r} -->
<!-- learning_correct_path_group_version_condition_df <- trial_df %>% -->
<!--   filter(phase == "learning", -->
<!--          state %in% c(1) -->
<!--          ) %>% -->
<!--   group_by(group, version, condition) %>% -->
<!--   summarise(mean_correct = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n() -->
<!--             ) -->

<!-- learning_correct_path_group_version_condition_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 12, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # bar plot -->
<!-- ggplot(learning_correct_path_group_version_condition_df, aes(x=condition, y=mean_correct*100)) + -->
<!--   geom_bar(stat="identity", aes(fill = condition)) + -->
<!--   geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), -->
<!--                 width=.2, -->
<!--                 position=position_dodge(.9)) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   scale_y_continuous("% Correct paths", limits = c(0, 105)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   theme(legend.position = "none", -->
<!--         axis.title.x=element_blank(), -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis(option = "viridis", discrete = TRUE) -->

<!-- ``` -->

<!-- #### Performance per environment -->

<!-- ```{r} -->
<!-- learning_paths_group_version_environment_df <- trial_df %>% -->
<!--   mutate(group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.character(environment)) %>% -->
<!--   filter(phase == "learning", -->
<!--          state %in% c(1) -->
<!--          ) %>% -->
<!--   group_by(environment) %>% -->
<!--   summarise(mean_correct_paths = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n() -->
<!--             ) -->

<!-- learning_paths_group_version_environment_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 14, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # bar plot -->
<!-- ggplot(learning_paths_group_version_environment_df, aes(x=environment, y=mean_correct_paths*100, fill=environment)) + -->
<!--   geom_bar(stat="identity", aes(fill=environment), position=position_dodge()) + -->
<!--   geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) + -->
<!--   scale_y_continuous(limits = c(0, 105)) + -->
<!--   #facet_grid(vars(group), vars(version), scales = "free_x") + -->
<!--   xlab("Environment") + -->
<!--   ylab("% Correct paths") + -->
<!--   theme_light(base_size = 16) + -->
<!--   theme(legend.position = "none",, -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis(option = "turbo", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Performance per group, version, condition, environment -->

<!-- ```{r} -->
<!-- learning_paths_group_condition_environment_df <- trial_df %>% -->
<!--   mutate(group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.character(environment)) %>% -->
<!--   filter(phase == "learning", -->
<!--          state %in% c(1) -->
<!--          ) %>% -->
<!--   group_by(version, group, environment, condition) %>% -->
<!--   summarise(mean_correct_paths = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n() -->
<!--             ) -->

<!-- learning_paths_group_version_environment_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 14, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # bar plot -->
<!-- ggplot(learning_paths_group_condition_environment_df, aes(x=environment, y=mean_correct_paths*100, fill=condition)) + -->
<!--   geom_bar(stat="identity", aes(fill=condition), position=position_dodge()) + -->
<!--   geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) + -->
<!--   scale_y_continuous(limits = c(0, 105)) + -->
<!--   facet_grid(vars(group), vars(version), scales = "free_x") + -->
<!--   xlab("Environment") + -->
<!--   ylab("% Correct paths") + -->
<!--   theme_light(base_size = 16) + -->
<!--   theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis(option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- ### Logistic regression -->

<!-- #### LogReg1: Difference from control condition -->

<!-- ```{r} -->
<!-- logreg_learning_correct_paths_group_version_condition_df <- trial_df %>% -->
<!--   filter(phase == "learning", -->
<!--          state == 1 -->
<!--          ) %>% -->
<!--   mutate(correct_path = as.factor(correct_path), -->
<!--          condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          group, -->
<!--          version, -->
<!--          environment) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 5) -->

<!-- log_model_learning_paths_control <- glmer(correct_path ~ group*version*condition + (1 | ID), -->
<!--                                           data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                           family = "binomial", -->
<!--                                           control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_control_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID), -->
<!--                                           data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                           family = "binomial", -->
<!--                                           control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_control_rs_env_i <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 | environment), -->
<!--                                           data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                           family = "binomial", -->
<!--                                           control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_control_rs_env_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), -->
<!--                                           data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                           family = "binomial", -->
<!--                                           control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(log_model_learning_paths_control, log_model_learning_paths_control_rs, log_model_learning_paths_control_rs_env_i, log_model_learning_paths_control_rs_env_rs) -->

<!-- tab_model(log_model_learning_paths_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->


<!-- ``` -->

<!-- #### LogReg2: Difference from goal-state condition -->

<!-- ```{r} -->
<!-- contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 2) -->

<!-- log_model_learning_paths_goalstate <- glmer(correct_path ~ group*version*condition + (1 | ID), -->
<!--                                             data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                             family = "binomial", -->
<!--                                             control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_goalstate_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID), -->
<!--                                             data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                             family = "binomial", -->
<!--                                             control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_goalstate_rs_env_i <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 | environment), -->
<!--                                             data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                             family = "binomial", -->
<!--                                             control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_goalstate_rs_env_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), -->
<!--                                             data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                             family = "binomial", -->
<!--                                             control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(log_model_learning_paths_goalstate, log_model_learning_paths_goalstate_rs, log_model_learning_paths_goalstate_rs_env_i, log_model_learning_paths_goalstate_rs_env_rs) -->

<!-- tab_model(log_model_learning_paths_goalstate_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_goalstate_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_goalstate_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- #### LogReg3: Difference from policy condition -->

<!-- -   Worse learning performance in goal-state, transition, and control condition compared to policy condition -->

<!-- ```{r} -->
<!-- contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 4) -->

<!-- log_model_learning_paths_policy <- glmer(correct_path ~ group*version*condition + (1 | ID), -->
<!--                                          data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                          family = "binomial", -->
<!--                                          control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_policy_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID), -->
<!--                                          data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                          family = "binomial", -->
<!--                                          control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_policy_rs_env_i <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 | environment), -->
<!--                                          data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                          family = "binomial", -->
<!--                                          control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_policy_rs_env_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), -->
<!--                                          data = logreg_learning_correct_paths_group_version_condition_df, -->
<!--                                          family = "binomial", -->
<!--                                          control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(log_model_learning_paths_policy, log_model_learning_paths_policy_rs, log_model_learning_paths_policy_rs_env_i, log_model_learning_paths_policy_rs_env_rs) -->

<!-- tab_model(log_model_learning_paths_policy_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_policy_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_policy_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- #### LogReg4: Difference from reward condition -->

<!-- -   Harmful drinkers have lower learning performance in reward condition, particularly in monetary version -->
<!-- -   Worse learning performance in goal-state, transition, and control condition compared to reward condition, particularly in monetary version, but for harmful drinkers and contrast goal-state\<reward also in alcohol version -->

<!-- ```{r} -->
<!-- contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 1) -->

<!-- log_model_learning_paths_reward <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_reward_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_reward_rs_env_i <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 | environment), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_reward_rs_env_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(log_model_learning_paths_reward, log_model_learning_paths_reward_rs, log_model_learning_paths_reward_rs_env_i, log_model_learning_paths_reward_rs_env_rs) -->

<!-- tab_model(log_model_learning_paths_reward_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_reward_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(log_model_learning_paths_reward_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->

<!-- ``` -->

<!-- #### LogReg5: Difference from transition condition -->

<!-- -   Better learning performance in reward and policy compared to transition condition, particularly in monetary version -->

<!-- ```{r} -->
<!-- contrasts(logreg_learning_correct_paths_group_version_condition_df$condition) <- contr.treatment(5, base = 3) -->

<!-- log_model_learning_paths_transition <- glmer(correct_path ~ group*version*condition + (1 | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_transition_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_transition_rs_env_i <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 | environment), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- log_model_learning_paths_transition_rs_env_rs <- glmer(correct_path ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_learning_correct_paths_group_version_condition_df, family = "binomial", control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(log_model_learning_paths_transition, log_model_learning_paths_transition_rs, log_model_learning_paths_transition_rs_env_i, log_model_learning_paths_transition_rs_env_rs) -->

<!-- tab_model(log_model_learning_paths_transition, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

## Time effects

### Condition index

#### Plots

##### Performance per group, version, index

```{r}
# get percent correct over time
learning_paths_condition_index_df <- trial_df %>%
  mutate(condition_index = as.factor(condition_index)) %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(group, version, condition_index) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

learning_paths_condition_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_paths_condition_index_df, aes(x=condition_index, y=mean_correct*100)) +
  geom_bar(stat="identity", aes(fill=condition_index)) +
  geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 105)) +
  facet_grid(vars(group), vars(version)) +
  xlab("Condition index") +
  ylab("% Correct paths") +
  theme_light(base_size = 16) +
  theme(legend.position = "none") +
  scale_fill_viridis(option = "plasma", discrete = TRUE)
```

##### Performance per group, version, condition, index

```{r}
# get percent correct over time
learning_paths_condition_condition_index_df <- trial_df %>%
  mutate(condition_index = as.factor(condition_index),
         condition = as.factor(condition)) %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(group, version, condition, condition_index) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

learning_paths_condition_condition_index_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
# bar plot
ggplot(learning_paths_condition_condition_index_df, aes(x=condition_index, y=mean_correct*100, fill=condition)) +
  geom_bar(stat="identity", aes(fill=condition), position=position_dodge()) +
  geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) +
  scale_y_continuous(limits = c(0, 105)) +
  facet_grid(vars(group), vars(version)) +
  xlab("Condition index") +
  ylab("% Correct paths") +
  theme_light(base_size = 16) +
  scale_fill_viridis(option = "viridis", discrete = TRUE)
```

#### Logistic regression

```{r}
logreg_learning_paths_group_version_condition_env_time_df <- trial_df %>%
  filter(phase == "learning",
         state == 1) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number()) %>%
  ungroup() %>%
  mutate(correct_path = as.factor(correct_path),
         group = as.factor(group),
         version = as.factor(version),
         condition = as.factor(condition),
         environment = as.factor(environment)) %>%
  select(ID,
         correct_path,
         group,
         version,
         condition,
         condition_index,
         accumulated_state1_visits,
         environment)

```

##### LogReg1: Difference from control condition

```{r}

contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 5)

log_model_learning_paths_index_control <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_index_control_rs <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition + condition_index | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_index_control, log_model_learning_paths_index_control_rs)

tab_model(log_model_learning_paths_index_control, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_index_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg2: Difference from goal-state condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 2)

log_model_learning_paths_index_goalstate <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_index_goalstate_rs <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition + condition_index | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_index_goalstate, log_model_learning_paths_index_goalstate_rs)

tab_model(log_model_learning_paths_index_goalstate, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_index_goalstate_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg3: Difference from policy condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 4)

log_model_learning_paths_index_policy <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_index_policy_rs <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition + condition_index | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_index_policy, log_model_learning_paths_index_policy_rs)

tab_model(log_model_learning_paths_index_policy, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_index_policy_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg4: Difference from reward condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 1)

log_model_learning_paths_index_reward <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_index_reward_rs <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition + condition_index | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_index_reward, log_model_learning_paths_index_reward_rs)

tab_model(log_model_learning_paths_index_reward, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_index_reward_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg5: Difference from transition condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 3)

log_model_learning_paths_index_transition <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_index_transition_rs <- glmer(correct_path ~ group*version*condition*condition_index
                                               + (1 + condition + condition_index | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_index_transition, log_model_learning_paths_index_transition_rs)

tab_model(log_model_learning_paths_index_transition, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_index_transition_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### Trial number

#### Plots

##### Performance per group, version, trial

```{r}
# get percent correct over time
learning_correct_paths_group_version_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number()
         ) %>%
  group_by(group, version, accumulated_state1_visits) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_path, na.rm=TRUE)[2],
            ci_u = ci(correct_path, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_paths_group_version_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
ggplot(learning_correct_paths_group_version_time_df, aes(x=accumulated_state1_visits+4, y=mean_correct*100)) +
  geom_line(size=1) +
  geom_ribbon(aes(ymin = ci_l * 100, ymax = ci_u * 100), alpha = 0.2) +
  scale_y_continuous(limits = c(0, 110)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  xlab("Accumulated state 1 visits") +
  ylab("% Correct paths") +
  theme(legend.title = element_blank())
```

##### Performance per group, version, condition, trial

```{r}
# get percent correct over time
learning_correct_paths_group_version_condition_time_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)
         ) %>%
  group_by(ID, condition) %>%
  mutate(accumulated_state1_visits = row_number()
         ) %>%
  group_by(group, version, condition, accumulated_state1_visits) %>%
  summarise(mean_correct = mean(correct_path, na.rm = TRUE),
            se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(correct_state_1, na.rm=TRUE)[2],
            ci_u = ci(correct_state_1, na.rm=TRUE)[3],
            n = n()
            )

learning_correct_paths_group_version_condition_time_df %>%
  kable("html") %>%
  kable_styling(font_size = 14,
                latex_options = "scale_down")
```

```{r}
ggplot(learning_correct_paths_group_version_condition_time_df, aes(x=accumulated_state1_visits+4, y=mean_correct*100)) +
  geom_line(aes(color=condition), size=1) +
  geom_ribbon(aes(ymin = ci_l * 100, ymax = ci_u * 100, fill = condition), alpha = 0.2) +
  scale_y_continuous(limits = c(0, 110)) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  xlab("Accumulated state 1 visits") +
  ylab("% Correct paths") +
  theme(legend.title = element_blank()) +
  scale_color_viridis(option = "viridis", discrete = TRUE) +
  scale_fill_viridis(option = "viridis", discrete = TRUE)
```

#### Logistic regression

##### LogReg1: Difference from control condition

```{r}

contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 5)

log_model_learning_paths_trial_control <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_trial_control_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition + accumulated_state1_visits | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_trial_control, log_model_learning_paths_trial_control_rs)

tab_model(log_model_learning_paths_trial_control, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_trial_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg2: Difference from goal-state condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 2)

log_model_learning_paths_trial_goalstate <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_trial_goalstate_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition + accumulated_state1_visits | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_trial_goalstate, log_model_learning_paths_trial_goalstate_rs)

tab_model(log_model_learning_paths_trial_goalstate, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_trial_goalstate_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg3: Difference from policy condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 4)

log_model_learning_paths_trial_policy <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_trial_policy_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition + accumulated_state1_visits | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_trial_policy, log_model_learning_paths_trial_policy_rs)

tab_model(log_model_learning_paths_trial_policy, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_trial_policy_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg4: Difference from reward condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 1)

log_model_learning_paths_trial_reward <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_trial_reward_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition + accumulated_state1_visits | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_trial_reward, log_model_learning_paths_trial_reward_rs)

tab_model(log_model_learning_paths_trial_reward, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_trial_reward_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

##### LogReg5: Difference from transition condition

```{r}
contrasts(logreg_learning_paths_group_version_condition_env_time_df$condition) <- contr.treatment(5, base = 3)

log_model_learning_paths_trial_transition <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

log_model_learning_paths_trial_transition_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits
                                               + (1 + condition + accumulated_state1_visits | ID),
                                               data = logreg_learning_paths_group_version_condition_env_time_df,
                                               family = "binomial",
                                               control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)))

anova(log_model_learning_paths_trial_transition, log_model_learning_paths_trial_transition_rs)

tab_model(log_model_learning_paths_trial_transition, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
tab_model(log_model_learning_paths_trial_transition_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

## Reaction times

### RT in state 1 per condition

#### Plot

```{r}
RT_state1_condition_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)) %>%
  group_by(group, version, condition) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_state1_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_state1_plotting_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1))

ggplot(RT_state1_plotting_df, aes(x=condition, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  xlab("Phase") +
  ylab("Reaction times") +
  theme(legend.position = "none",
        axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis("Condition", option = "viridis", discrete = TRUE)
```

#### Linear regression

```{r}
linreg_learning_state1_rt_df <- trial_df %>%
  filter(phase == "learning",
         state == 1
         ) %>%
  mutate(condition = as.factor(condition),
         group = as.factor(group),
         version = as.factor(version),
         environment = as.factor(environment)) %>%
  select(ID,
         RT,
         condition,
         group,
         version,
         environment)
```

```{r}
rt_learning_state1_model <- lmer(data = linreg_learning_state1_rt_df, 
                                 RT ~ group*version*condition + (1 | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

rt_learning_state1_model_rs <- lmer(data = linreg_learning_state1_rt_df, 
                                 RT ~ group*version*condition + (1 + condition | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

# rt_learning_state1_model_rs_env_i <- lmer(linreg_learning_state1_rt_df, 
#                                  RT ~ group*version*condition + (1 + condition | ID) + (1 | environment), 
#                                  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
#                                  REML = FALSE)
# 
# rt_learning_state1_model_rs_env_rs <- lmer(linreg_learning_state1_rt_df, 
#                                  RT ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), 
#                                  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
#                                  REML = FALSE)

anova(rt_learning_state1_model, rt_learning_state1_model_rs)

tab_model(rt_learning_state1_model_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### RT in all states per condition

#### Plot

```{r}
RT_state1_condition_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)) %>%
  group_by(group, version, condition) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3])

RT_state1_condition_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_state1_plotting_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3))

ggplot(RT_state1_plotting_df, aes(x=condition, y=RT, fill = condition)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  ylab("Reaction times") +
  theme(legend.position = "none",
        axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis("Condition", option = "viridis", discrete = TRUE)
```

#### Linear regression

```{r}
linreg_learning_state123_rt_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)
         ) %>%
  mutate(condition = as.factor(condition),
         group = as.factor(group),
         version = as.factor(version),
         environment = as.factor(environment)) %>%
  select(ID,
         RT,
         condition,
         group,
         version,
         environment)
```

```{r}
rt_learning_state123_model <- lmer(data = linreg_learning_state123_rt_df, 
                                 RT ~ group*version*condition + (1 | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

rt_learning_state123_model_rs <- lmer(data = linreg_learning_state123_rt_df, 
                                 RT ~ group*version*condition + (1 + condition | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

# rt_learning_state123_model_rs_env_i <- lmer(linreg_learning_state123_rt_df, 
#                                  RT ~ group*version*condition + (1 + condition | ID) + (1 | environment), 
#                                  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
#                                  REML = FALSE)
# 
# rt_learning_state123_model_rs_env_rs <- lmer(linreg_learning_state123_rt_df, 
#                                  RT ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), 
#                                  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
#                                  REML = FALSE)

anova(rt_learning_state123_model, rt_learning_state123_model_rs)

tab_model(rt_learning_state123_model_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### RT in state 1 - correct choice

#### Plot

```{r}
RT_state1_condition_phase_correct_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1)) %>%
  group_by(group, version, condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

RT_state1_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_state1_correct_df <- trial_df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(phase == "learning",
         state %in% c(1))

ggplot(RT_state1_correct_df, aes(x=condition, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  ylab("Reaction times") +
  theme(axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis("Correct", option = "magma", discrete = TRUE)
```

#### Linear regression

```{r}
linreg_learning_state1_rt_correct_df <- trial_df %>%
  filter(phase == "learning",
         state == 1
         ) %>%
  mutate(condition = as.factor(condition),
         group = as.factor(group),
         version = as.factor(version),
         environment = as.factor(environment),
         correct = as.factor(correct)) %>%
  select(ID,
         RT,
         condition,
         group,
         version,
         environment,
         correct)
```

```{r}
rt_correct_learning_state1_model <- lmer(data = linreg_learning_state1_rt_correct_df, 
                                 RT ~ group*version*condition*correct + (1 | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

rt_correct_learning_state1_model_rs <- lmer(data = linreg_learning_state1_rt_correct_df, 
                                 RT ~ group*version*condition*correct + (1 + condition | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

rt_correct_learning_state1_model_rs2 <- lmer(data = linreg_learning_state1_rt_correct_df, 
                                 RT ~ group*version*condition*correct + (1 + condition + correct | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

anova(rt_correct_learning_state1_model, rt_correct_learning_state1_model_rs, rt_correct_learning_state1_model_rs2)

tab_model(rt_correct_learning_state1_model_rs2, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

### RT in all states - correct choice

#### Plot

```{r}
RT_state1_condition_phase_correct_df <- trial_df %>%
  filter(phase == "learning",
         state %in% c(1,2,3)) %>%
  group_by(group, version, condition, phase, correct) %>%
  summarise(mean_RT = mean(RT),
            se_RT = sd(RT, na.rm = TRUE)/sqrt(n()),
            ci_l = ci(RT, na.rm=TRUE)[2],
            ci_u = ci(RT, na.rm=TRUE)[3],
            n = n())

RT_state1_condition_phase_correct_df %>%
  kable("html") %>%
  kable_styling(font_size = 16,
                latex_options = "scale_down")
```

```{r}
RT_state1_correct_df <- trial_df %>%
  mutate(correct = as.factor(correct)) %>%
  filter(phase == "learning",
         state %in% c(1,2,3))

ggplot(RT_state1_correct_df, aes(x=condition, y=RT, fill = correct)) +
  geom_boxplot() +
  scale_y_continuous(labels = scales::comma) +
  facet_grid(vars(group), vars(version)) +
  theme_light(base_size = 16) +
  ylab("Reaction times") +
  theme(axis.title.x=element_blank(),
        axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) +
  scale_fill_viridis("Correct", option = "magma", discrete = TRUE)
```

#### Linear regression

```{r}
linreg_learning_state123_rt_correct_df <- trial_df %>%
  filter(phase == "learning",
         state%in% c(1,2,3)
         ) %>%
  mutate(condition = as.factor(condition),
         group = as.factor(group),
         version = as.factor(version),
         environment = as.factor(environment),
         correct = as.factor(correct)) %>%
  select(ID,
         RT,
         condition,
         group,
         version,
         environment,
         correct)
```

```{r}
rt_correct_learning_state123_model <- lmer(data = linreg_learning_state123_rt_correct_df, 
                                 RT ~ group*version*condition*correct + (1 | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

rt_correct_learning_state123_model_rs <- lmer(data = linreg_learning_state123_rt_correct_df, 
                                 RT ~ group*version*condition*correct + (1 + condition | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

rt_correct_learning_state123_model_rs2 <- lmer(data = linreg_learning_state123_rt_correct_df, 
                                 RT ~ group*version*condition*correct + (1 + condition + correct | ID), 
                                 control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
                                 REML = FALSE)

# rt_learning_state1_model_rs_env_i <- lmer(linreg_learning_state1_rt_df, 
#                                  RT ~ group*version*condition + (1 + condition | ID) + (1 | environment), 
#                                  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
#                                  REML = FALSE)
# 
# rt_learning_state1_model_rs_env_rs <- lmer(linreg_learning_state1_rt_df, 
#                                  RT ~ group*version*condition + (1 + condition | ID) + (1 + condition | environment), 
#                                  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)),
#                                  REML = FALSE)

anova(rt_correct_learning_state123_model, rt_correct_learning_state123_model_rs, rt_correct_learning_state123_model_rs2)

tab_model(rt_correct_learning_state123_model_rs2, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;'))
```

<!-- # Test Phase -->

<!-- ## Main analysis -->

<!-- ### Plots -->

<!-- #### Performance per condition, group, version -->

<!-- ```{r} -->
<!-- test_correct_paths_group_version_condition_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1) -->
<!--          ) %>% -->
<!--   group_by(group, version, condition) %>% -->
<!--   summarise(mean_correct = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n() -->
<!--             ) -->

<!-- test_correct_paths_group_version_condition_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 18, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # bar plot -->
<!-- ggplot(test_correct_paths_group_version_condition_df, aes(x=condition, y=mean_correct*100)) + -->
<!--   geom_bar(stat="identity", aes(fill = condition)) + -->
<!--   geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), -->
<!--                 width=.2, -->
<!--                 position=position_dodge(.9)) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   scale_y_continuous("% Correct paths", limits = c(0, 105)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   theme(legend.position = "none", -->
<!--         axis.title.x=element_blank(), -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis(option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Environment effects -->

<!-- ```{r} -->
<!-- # get percent correct over time -->
<!-- test_path_component_environment_df <- trial_df %>% -->
<!--   mutate(environment = as.factor(environment)) %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1 -->
<!--          ) %>% -->
<!--   group_by(version, group, condition, environment) %>% -->
<!--   summarise(mean_correct = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n()) -->

<!-- test_path_component_environment_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 16, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # bar plot -->
<!-- ggplot(test_path_component_environment_df, aes(x=environment, y=mean_correct*100, fill=condition)) + -->
<!--   geom_bar(stat="identity", aes(fill=condition), position=position_dodge()) + -->
<!--   geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) + -->
<!--   scale_y_continuous(limits = c(0, 105)) + -->
<!--   facet_grid(vars(group), vars(version), scales = "free_x") + -->
<!--   xlab("Environment") + -->
<!--   ylab("% Correct paths") + -->
<!--   theme_light(base_size = 16) + -->
<!--   theme(axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis(option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- ### Logistic regression (as preregistered + identify optimal random effects structure + test version effects) -->

<!-- ```{r} -->
<!-- # Prepare LogReg dfs -->
<!-- logreg_test_path_group_version_condition_df_full <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1) %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          version = as.factor(version), -->
<!--          group = as.factor(group), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(group, -->
<!--          version, -->
<!--          ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          environment) -->

<!-- logreg_test_path_condition_df_lowrisk_control <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1, -->
<!--          group == "Low-risk drinkers", -->
<!--          version == "Monetary version") %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          environment) -->

<!-- logreg_test_path_group_condition_df_alcohol <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1, -->
<!--          version == "Alcohol version") %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(group, -->
<!--          ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          environment) -->
<!-- ``` -->

<!-- #### Model 1: Low-risk drinkers, control version, compare against transition revaluation -->

<!-- > **Hypothesis 1:** **Main effect of condition (reward vs. transition revaluation, goal-state vs. transition revaluation)** -->
<!-- > -->
<!-- > Low-risk drinkers use SR to some extent when learning in a non-alcohol context. Specifically, we expect more correct test phase paths in the reward revaluation and the goal-state revaluation conditions compared to the transition revaluation condition, respectively. -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_df_lowrisk_control$environment) <- contr.sum(5) -->
<!-- contrasts(logreg_test_path_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 3) -->

<!-- model1 <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_rs <- glmer(correct_path ~ condition + (1 + condition | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_rs_env_i <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 | environment), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_rs_env_rs <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model1, model1_rs, model1_rs_env_i, model1_rs_env_rs) -->

<!-- tab_model(model1_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model1_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model1_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->

<!-- ``` -->

<!-- #### Model 2: Low-risk drinkers, control version, compare against policy revaluation -->

<!-- > **Hypothesis 2:** **Main effect of condition (reward vs. policy revaluation, goal-state vs. policy revaluation)** -->
<!-- > -->
<!-- > The differences between reward and transition revaluation and between goal-state and transition revaluation cannot fully be explained by use of a model-based strategy with a higher learning rate for the reward compared to the transition structure. Specifically, we expect fewer correct test phase paths in the policy revaluation condition compared to the reward and goal-state revaluation conditions, respectively. -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_df_lowrisk_control$environment) <- contr.sum(5) -->
<!-- contrasts(logreg_test_path_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 4) -->

<!-- model2 <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model2_rs <- glmer(correct_path ~ condition + (1 + condition | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model2_rs_env_i <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 | environment), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model2_rs_env_rs <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model2, model2_rs, model2_rs_env_i, model2_rs_env_rs) -->

<!-- tab_model(model2_rs, show.est = T, show.stat = T, df.method = "wald", auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model2_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model2_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- Did individuals who explored more during learning phase perform better in policy revaluation (more positive slopes)? -->

<!-- ```{r} -->
<!-- # extract individual slopes for condition (contrast reward vs. policy) -->
<!-- individual_slopes <- coef(model2_rs)$ID[,2] -->

<!-- # calculate how often suboptimal path was taken during learning -->
<!-- exploration_df <- trial_df %>% -->
<!--   filter(group == "Low-risk drinkers", -->
<!--          version == "Monetary version", -->
<!--          condition == "Policy revaluation", -->
<!--          phase == "learning") %>% -->
<!--   filter(! trial %in% c(1,2,3,4)) %>% -->
<!--   group_by(ID, trial) %>% -->
<!--   mutate(least_optimal_path = case_when((state == 1 & correct == 0 & lead(correct) == 0) ~ 1, # incorrect state 1 and second stage choice -->
<!--                                   (state == 1 & correct == 1) ~ 0, # correct state 1 choice -->
<!--                                   (state == 1 & lead(correct) == 1) ~ 0), # correct second stage choice -->
<!--          suboptimal_path = case_when((state == 1 & correct == 0) ~ 1, # incorrect state 1 choice -->
<!--                                   (state == 1 & lead(correct) == 0) ~ 1, # incorrect second stage choice -->
<!--                                   (state == 1 & correct == 1 & lead(correct) == 1) ~ 0,)) %>%  # correct state 1 and incorrect second stage choice) -->
<!--   filter(state == 1) %>% -->
<!--   group_by(ID) %>% -->
<!--   mutate(percent_least_optimal_path = mean(least_optimal_path), -->
<!--          percent_exploration = mean(suboptimal_path)) %>% -->
<!--   select(ID, percent_least_optimal_path, percent_exploration) %>% -->
<!--   unique() -->

<!-- exploration_df$individual_slope <- individual_slopes -->

<!-- cor.test(exploration_df$percent_least_optimal_path, exploration_df$individual_slope) -->
<!-- cor.test(exploration_df$percent_exploration, exploration_df$individual_slope) -->

<!-- ggplot(exploration_df, aes(x=percent_least_optimal_path, y=individual_slope)) + -->
<!--   geom_point(aes(y=individual_slope)) + -->
<!--   scale_y_continuous("Slope reward vs. policy") + -->
<!--   scale_x_continuous("% Least optimal path during learning") + -->
<!--   theme_light(base_size = 16) -->

<!-- ggplot(exploration_df, aes(x=percent_exploration, y=individual_slope)) + -->
<!--   geom_point(aes(y=individual_slope)) + -->
<!--   geom_smooth() + -->
<!--   scale_y_continuous("Slope reward vs. policy") + -->
<!--   scale_x_continuous("% Exploration during learning") + -->
<!--   theme_light(base_size = 16) -->
<!-- ``` -->

<!-- #### Model 3: Full dataset, compare against transition revaluation -->

<!-- > **Hypothesis 3:** **Interaction of condition (reward vs. transition revaluation) \* group (harmful vs. low-risk drinkers)** -->
<!-- > -->
<!-- > Individuals with harmful alcohol use (harmful drinkers) show a higher degree of SR use compared to individuals with low-risk alcohol use (low-risk drinkers). Specifically, we expect more correct test phase paths in the reward revaluation condition compared to the transition revaluation condition for harmful drinkers compared to low-risk drinkers. -->

<!-- > **Hypothesis 4:** **Interaction of condition (reward vs. transition revaluation) \* group (harmful vs. low-risk drinkers) \* context (alcohol vs. non-alcohol)** -->
<!-- > -->
<!-- > Harmful drinkers show a higher degree of SR use compared to low-risk drinkers when learning in an alcohol compared to a non-alcohol context. Specifically, we expect more correct test phase paths in the reward revaluation compared to the transition revaluation condition for harmful drinkers compared to low-risk drinkers in the alcohol compared to the non-alcohol task version. -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_version_condition_df_full$environment) <- contr.sum(10) -->
<!-- contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 3) -->

<!-- # create model matrices -->
<!-- mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_group_version_condition_df_full) -->
<!-- version_alc <- mm_version[,2] # version alc compared to version monetary -->

<!-- mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_group_version_condition_df_full) -->
<!-- group_harmful <- mm_group[,2] # group harmful compared to low-risk -->

<!-- mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_group_version_condition_df_full) -->
<!-- condition_control <- mm_condition[,5] # condition control compared to transition -->
<!-- condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition -->
<!-- condition_policy <- mm_condition[,4] # condition policy compared to transition -->
<!-- condition_reward <- mm_condition[,2] # condition reward compared to transition -->

<!-- model3 <- glmer(correct_path ~ -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + -->
<!--                   (1 | ID), -->
<!--                 data = logreg_test_path_group_version_condition_df_full, -->
<!--                 family = "binomial", -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model3_rs <- glmer(correct_path ~ -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + -->
<!--                   (1 + condition_control + condition_goalstate + condition_policy + condition_reward | ID), -->
<!--                 data = logreg_test_path_group_version_condition_df_full, -->
<!--                 family = "binomial", -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model3_rs_env_i <- glmer(correct_path ~ -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc + -->
<!--                   (1 + condition_control + condition_goalstate + condition_policy + condition_reward | ID) + (1 | environment), -->
<!--                 data = logreg_test_path_group_version_condition_df_full, -->
<!--                 family = "binomial", -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model3_rs_env_rs <- glmer(correct_path ~ -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc -->
<!--                   + (1 + condition_control + condition_goalstate + condition_policy + condition_reward | ID) -->
<!--                   + (1 + condition_control + condition_goalstate + condition_policy + condition_reward| environment), -->
<!--                 data = logreg_test_path_group_version_condition_df_full, -->
<!--                 family = "binomial", -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model3, model3_rs, model3_rs_env_i, model3_rs_env_rs) -->

<!-- tab_model(model3_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model3_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model3_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->

<!-- model3_rs_vers <- glmer(correct_path ~ -->
<!--                   group*version*condition + -->
<!--                   (1 + condition | ID), -->
<!--                 data = logreg_test_path_group_version_condition_df_full, -->
<!--                 family = "binomial", -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model3_rs, model3_rs_vers) -->

<!-- tab_model(model3_rs_vers, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- #### Model 4: Alcohol context, compare against reward revaluation -->

<!-- > **Hypothesis 5: Interaction of condition (goal-state vs. reward revaluation) \* group (harmful vs. low-risk drinkers)** -->
<!-- > -->
<!-- > Harmful drinkers show a higher degree of rigid goal-based reduced SR use when learning in an alcohol context compared to low-risk drinkers. Specifically, we expect less correct test phase paths in the goal-state compared to the reward revaluation condition for harmful drinkers compared to low-risk drinkers. -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_condition_df_alcohol$environment) <- contr.sum(5) -->
<!-- contrasts(logreg_test_path_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 1) -->

<!-- model4 <- glmer(correct_path ~ condition*group + (1 | ID), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_rs <- glmer(correct_path ~ condition*group + (1 + condition | ID), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_rs_env_i <- glmer(correct_path ~ condition*group + (1 + condition | ID) + (1 | environment), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_rs_env_rs <- glmer(correct_path ~ condition*group + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model4, model4_rs, model4_rs_env_i, model4_rs_env_rs) -->

<!-- tab_model(model4_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model4_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model4_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- #### Model 5: Full dataset, compare against reward revaluation -->

<!-- > **Hypothesis 6: Interaction of condition (goal-state vs. reward revaluation) \* group (harmful vs. low-risk drinkers) \* context (alcohol vs. non-alcohol)** -->
<!-- > -->
<!-- > Harmful drinkers show a higher degree of rigid goal-based reduced SR use compared to low-risk drinkers when learning in an alcohol compared to a non-alcohol context. Specifically, we expect less correct test phase paths in the goal-state compared to the reward revaluation condition for harmful drinkers compared to low-risk drinkers in the alcohol compared to the non-alcohol task version. -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_version_condition_df_full$environment) <- contr.sum(10) -->
<!-- contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 1) -->

<!-- # create model matrices -->
<!-- mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_group_version_condition_df_full) -->
<!-- version_alc <- mm_version[,2] # version alc compared to version monetary -->

<!-- mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_group_version_condition_df_full) -->
<!-- group_harmful <- mm_group[,2] # group harmful compared to low-risk -->

<!-- mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_group_version_condition_df_full) -->
<!-- condition_control <- mm_condition[,5] # condition control compared to reward -->
<!-- condition_goalstate <- mm_condition[,2] # condition goalstate compared to reward -->
<!-- condition_policy <- mm_condition[,4] # condition policy compared to reward -->
<!-- condition_transition <- mm_condition[,3] # condition transition compared to reward -->

<!-- model5 <- glmer(correct_path ~  -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful +  -->
<!--                   condition_policy:group_harmful + condition_transition:group_harmful +  -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc +  -->
<!--                   (1 | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optCtrl=list(maxfun=1e6),  -->
<!--                              optimizer = "bobyqa")) -->

<!-- model5_rs <- glmer(correct_path ~  -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful +  -->
<!--                   condition_policy:group_harmful + condition_transition:group_harmful +  -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc +  -->
<!--                   (1 + condition_control + condition_goalstate + condition_policy + condition_transition | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optCtrl=list(maxfun=1e6),  -->
<!--                              optimizer = "bobyqa")) -->

<!-- model5_rs_env_i <- glmer(correct_path ~  -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful +  -->
<!--                   condition_policy:group_harmful + condition_transition:group_harmful +  -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc +  -->
<!--                   (1 + condition_control + condition_goalstate + condition_policy + condition_transition | ID)  -->
<!--                   + (1 | environment),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optCtrl=list(maxfun=1e6),  -->
<!--                              optimizer = "bobyqa")) -->

<!-- model5_rs_env_rs <- glmer(correct_path ~  -->
<!--                   condition_control + condition_goalstate + condition_policy + condition_transition + group_harmful + -->
<!--                   condition_control:group_harmful + condition_goalstate:group_harmful +  -->
<!--                   condition_policy:group_harmful + condition_transition:group_harmful +  -->
<!--                   condition_control:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_transition:group_harmful:version_alc +  -->
<!--                   (1 + condition_control + condition_goalstate + condition_policy + condition_transition | ID)  -->
<!--                   + (1 + condition_control + condition_goalstate + condition_policy + condition_transition | environment),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optCtrl=list(maxfun=1e6),  -->
<!--                              optimizer = "bobyqa")) -->

<!-- anova(model5, model5_rs, model5_rs_env_i, model5_rs_env_rs) -->

<!-- tab_model(model5_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model5_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model5_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->

<!-- model5_rs_vers <- glmer(correct_path ~  -->
<!--                   group*version*condition +  -->
<!--                   (1 + condition | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optCtrl=list(maxfun=1e6),  -->
<!--                              optimizer = "bobyqa")) -->

<!-- tab_model(model5_rs_vers, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- #### Compare to control condition -->

<!-- ##### Model 1: Low-risk drinkers, control version, compare against control condition -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_df_lowrisk_control$condition) <- contr.treatment(5, base = 5) -->

<!-- model1_control <- glmer(correct_path ~ condition + (1 | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_control_rs <- glmer(correct_path ~ condition + (1 + condition | ID), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_control_rs_env_i <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 | environment), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_control_rs_env_rs <- glmer(correct_path ~ condition + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_condition_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model1_control, model1_control_rs, model1_control_rs_env_i, model1_control_rs_env_rs) -->

<!-- tab_model(model1_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model1_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model1_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 3: Full dataset, compare against control condition -->

<!-- -   Lower performance in all conditions -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_version_condition_df_full$condition) <- contr.treatment(5, base = 5) -->

<!-- # create model matrices -->
<!-- mm_version <- model.matrix(correct_path ~ 1 + version, data=logreg_test_path_group_version_condition_df_full) -->
<!-- version_alc <- mm_version[,2] # version alc compared to version monetary -->

<!-- mm_group <- model.matrix(correct_path ~ 1 + group, data=logreg_test_path_group_version_condition_df_full) -->
<!-- group_harmful <- mm_group[,2] # group harmful compared to low-risk -->

<!-- mm_condition <- model.matrix(correct_path ~ 1 + condition, data=logreg_test_path_group_version_condition_df_full) -->
<!-- condition_transition <- mm_condition[,4] # condition control compared to transition -->
<!-- condition_goalstate <- mm_condition[,3] # condition goalstate compared to transition -->
<!-- condition_policy <- mm_condition[,5] # condition policy compared to transition -->
<!-- condition_reward <- mm_condition[,2] # condition reward compared to transition -->

<!-- model3_control <- glmer(correct_path ~  -->
<!--                   condition_transition + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_transition:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_transition:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc +  -->
<!--                   (1 | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa",  -->
<!--                              optCtrl=list(maxfun=1e6))) -->

<!-- model3_control_rs <- glmer(correct_path ~  -->
<!--                   condition_transition + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_transition:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_transition:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc +  -->
<!--                   (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa",  -->
<!--                              optCtrl=list(maxfun=1e6))) -->

<!-- model3_control_rs_env_i <- glmer(correct_path ~  -->
<!--                   condition_transition + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_transition:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_transition:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc +  -->
<!--                   (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | ID)  -->
<!--                   + (1 | environment),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa",  -->
<!--                              optCtrl=list(maxfun=1e6))) -->

<!-- model3_control_rs_env_rs <- glmer(correct_path ~  -->
<!--                   condition_transition + condition_goalstate + condition_policy + condition_reward + group_harmful + -->
<!--                   condition_transition:group_harmful + condition_goalstate:group_harmful + -->
<!--                   condition_policy:group_harmful + condition_reward:group_harmful + -->
<!--                   condition_transition:group_harmful:version_alc + condition_goalstate:group_harmful:version_alc + -->
<!--                   condition_policy:group_harmful:version_alc + condition_reward:group_harmful:version_alc +  -->
<!--                   (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | ID)  -->
<!--                   + (1 + condition_transition + condition_goalstate + condition_policy + condition_reward | environment),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa",  -->
<!--                              optCtrl=list(maxfun=1e6))) -->

<!-- anova(model3_control, model3_control_rs, model3_control_rs_env_i, model3_control_rs_env_rs) -->

<!-- tab_model(model3_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model3_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model3_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->

<!-- model3_control_rs_vers <- glmer(correct_path ~  -->
<!--                   group*version*condition +  -->
<!--                   (1 + condition | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa",  -->
<!--                              optCtrl=list(maxfun=1e6))) -->

<!-- anova(model3_control_rs, model3_control_rs_vers) -->

<!-- tab_model(model3_control_rs_vers, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 4: Alcohol context, compare against reward revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_condition_df_alcohol$condition) <- contr.treatment(5, base = 5) -->

<!-- model4_control <- glmer(correct_path ~ condition*group + (1 | ID), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_control_rs <- glmer(correct_path ~ condition*group + (1 + condition | ID), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_control_rs_env_i <- glmer(correct_path ~ condition*group + (1 + condition | ID) + (1 | environment), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_control_rs_env_rs <- glmer(correct_path ~ condition*group + (1 + condition | ID) + (1 + condition | environment), data = logreg_test_path_group_condition_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model4_control, model4_control_rs, model4_control_rs_env_i, model4_control_rs_env_rs) -->

<!-- tab_model(model4_control_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model4_control_rs_env_i, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model4_control_rs_env_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ## Time effects -->

<!-- ### Condition index -->

<!-- #### Plot -->

<!-- ```{r} -->
<!-- # get percent correct over time -->
<!-- test_paths_group_version_condition_index_df <- trial_df %>% -->
<!--   mutate(condition_index = as.factor(condition_index)) %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1 -->
<!--          ) %>% -->
<!--   group_by(group, version, condition, condition_index) %>% -->
<!--   summarise(mean_correct = mean(correct_path, na.rm = TRUE), -->
<!--             se_correct = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3], -->
<!--             n = n() -->
<!--             ) -->

<!-- test_paths_group_version_condition_index_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 16, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # bar plot -->
<!-- ggplot(test_paths_group_version_condition_index_df, aes(x=condition_index, y=mean_correct*100, fill=condition)) + -->
<!--   geom_bar(stat="identity", position=position_dodge(), aes(fill = condition)) + -->
<!--   geom_errorbar(aes(ymin=ci_l*100, ymax=ci_u*100), width=.2, position=position_dodge(.9)) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   scale_y_continuous("% Correct paths", limits = c(-10, 105)) + -->
<!--   xlab("Condition index") + -->
<!--   theme_light(base_size = 16) + -->
<!--   scale_fill_viridis("Condition", option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Logistic regression -->

<!-- ```{r} -->
<!-- # Prepare LogReg dfs -->
<!-- logreg_test_path_group_version_condition_env_time_df_full <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1) %>% -->
<!--   group_by(ID, condition) %>% -->
<!--   mutate(accumulated_state1_visits = row_number()) %>% -->
<!--   ungroup() %>% -->
<!--   mutate(correct_path = as.factor(correct_path), -->
<!--          condition = as.factor(condition), -->
<!--          version = as.factor(version), -->
<!--          group = as.factor(group), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(group, -->
<!--          version, -->
<!--          ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          condition_index, -->
<!--          accumulated_state1_visits, -->
<!--          environment) -->

<!-- logreg_test_path_condition_env_time_df_lowrisk_control <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1, -->
<!--          group == "Low-risk drinkers", -->
<!--          version == "Monetary version") %>% -->
<!--   group_by(ID, condition) %>% -->
<!--   mutate(accumulated_state1_visits = row_number()) %>% -->
<!--   ungroup() %>% -->
<!--   mutate(correct_path = as.factor(correct_path), -->
<!--          condition = as.factor(condition), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          condition_index, -->
<!--          accumulated_state1_visits, -->
<!--          environment) -->

<!-- logreg_test_path_group_condition_env_time_df_alcohol <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1, -->
<!--          version == "Alcohol version") %>% -->
<!--   group_by(ID, condition) %>% -->
<!--   mutate(accumulated_state1_visits = row_number()) %>% -->
<!--   ungroup() %>% -->
<!--   mutate(correct_path = as.factor(correct_path), -->
<!--          condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(group, -->
<!--          ID, -->
<!--          correct_path, -->
<!--          condition, -->
<!--          condition_index, -->
<!--          accumulated_state1_visits, -->
<!--          environment) -->
<!-- ``` -->

<!-- ##### Model 1_index: Low-risk drinkers, control version, compare against transition revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_env_time_df_lowrisk_control$condition) <- contr.treatment(5, base = 3) -->

<!-- model1_index <- glmer(correct_path ~ condition*condition_index + (1 + condition | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_index_rs <- glmer(correct_path ~ condition*condition_index + (1 + condition + condition_index | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model1_index, model1_index_rs) -->

<!-- tab_model(model1_index, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model1_index_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 2_index: Low-risk drinkers, control version, compare against policy revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_env_time_df_lowrisk_control$condition) <- contr.treatment(5, base = 4) -->

<!-- model2_index <- glmer(correct_path ~ condition*condition_index + (1 + condition | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model2_index_rs <- glmer(correct_path ~ condition*condition_index + (1 + condition + condition_index | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model2_index, model2_index_rs) -->

<!-- tab_model(model2_index, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model2_index_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 3_index: Full dataset, compare against transition revaluation -->

<!-- Change if it turns out that preregistered model without full version effects is optimal -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_version_condition_env_time_df_full$condition) <- contr.treatment(5, base = 3) -->

<!-- model3_index <- glmer(correct_path ~ group*version*condition*condition_index + (1 + condition | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_env_time_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model3_index_rs <- glmer(correct_path ~ group*version*condition*condition_index + (1 + condition + condition_index | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_env_time_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model3_index, model3_index_rs) -->

<!-- tab_model(model3_index, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model3_index_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 4_index: Alcohol context, compare against reward revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_condition_env_time_df_alcohol$condition) <- contr.treatment(5, base = 1) -->

<!-- model4_index <- glmer(correct_path ~ condition*group*condition_index + (1 + condition | ID), data = logreg_test_path_group_condition_env_time_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_index_rs <- glmer(correct_path ~ condition*group*condition_index + (1 + condition + condition_index | ID), data = logreg_test_path_group_condition_env_time_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model4_index, model4_index_rs) -->

<!-- tab_model(model4_index, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model4_index_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 5_index: Full dataset, compare against reward revaluation -->

<!-- Change if it turns out that preregistered model without full version effects is optimal -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_condition_env_time_df_alcohol$condition) <- contr.treatment(5, base = 1) -->

<!-- model5_index <- glmer(correct_path ~ group*version*condition*condition_index + (1 + condition | ID),  -->
<!--                 data = logreg_test_path_group_condition_env_time_df_alcohol,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model5_index_rs <- glmer(correct_path ~ group*version*condition*condition_index + (1 + condition + condition_index | ID),  -->
<!--                 data = logreg_test_path_group_condition_env_time_df_alcohol,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model5_index, model5_index_rs) -->

<!-- tab_model(model5_index, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model5_index_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ### Trial number (within condition) effects -->

<!-- #### Plot -->

<!-- ```{r} -->
<!-- test_path_group_version_condition_trial_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1) %>% -->
<!--   group_by(group, version, condition, trial) %>% -->
<!--   summarise(n = n(), -->
<!--             sum_correct_path = sum(correct_path, na.rm=T), -->
<!--             mean_correct_path = mean(correct_path, na.rm=T), -->
<!--             se_correct_path = sd(correct_path, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(correct_path, na.rm=TRUE)[2], -->
<!--             ci_u = ci(correct_path, na.rm=TRUE)[3] -->
<!--             ) -->

<!-- test_path_group_version_condition_trial_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 18, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- # line plot state 1 -->
<!-- ggplot(test_path_group_version_condition_trial_df, aes(x=trial, y=mean_correct_path*100)) + -->
<!--   geom_line(aes(color=condition), size=1) + -->
<!--   geom_ribbon(aes(ymin = ci_l * 100, ymax = ci_u * 100, fill = condition), alpha = 0.2) +  -->
<!--   scale_y_continuous(limits = c(-20, 150)) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   xlab("Test trial") + -->
<!--   ylab("% Correct paths") + -->
<!--   theme(legend.title = element_blank()) + -->
<!--   scale_color_viridis(option = "viridis", discrete = TRUE) + -->
<!--   scale_fill_viridis(option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Logistic regression -->

<!-- ##### Model 1_trial: Low-risk drinkers, control version, compare against transition revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_env_time_df_lowrisk_control$condition) <- contr.treatment(5, base = 3) -->

<!-- model1_trial <- glmer(correct_path ~ condition*accumulated_state1_visits + (1 + condition | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model1_trial_rs <- glmer(correct_path ~ condition*accumulated_state1_visits + (1 + condition + accumulated_state1_visits | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model1_trial, model1_trial_rs) -->

<!-- tab_model(model1_trial, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model1_trial_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 2_trial: Low-risk drinkers, control version, compare against policy revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_condition_env_time_df_lowrisk_control$condition) <- contr.treatment(5, base = 4) -->

<!-- model2_trial <- glmer(correct_path ~ condition*accumulated_state1_visits + (1 + condition | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model2_trial_rs <- glmer(correct_path ~ condition*accumulated_state1_visits + (1 + condition + accumulated_state1_visits | ID), data = logreg_test_path_condition_env_time_df_lowrisk_control, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model2_trial, model2_trial_rs) -->

<!-- tab_model(model2_trial, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model2_trial_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 3_trial: Full dataset, compare against transition revaluation -->

<!-- Change if it turns out that preregistered model without full version effects is optimal -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_version_condition_env_time_df_full$condition) <- contr.treatment(5, base = 3) -->

<!-- model3_trial <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits + (1 + condition | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_env_time_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model3_trial_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits + (1 + condition + accumulated_state1_visits | ID),  -->
<!--                 data = logreg_test_path_group_version_condition_env_time_df_full,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model3_trial, model3_trial_rs) -->

<!-- tab_model(model3_trial, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model3_trial_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 4_trial: Alcohol context, compare against reward revaluation -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_condition_env_time_df_alcohol$condition) <- contr.treatment(5, base = 1) -->

<!-- model4_trial <- glmer(correct_path ~ condition*group*accumulated_state1_visits + (1 + condition | ID), data = logreg_test_path_group_condition_env_time_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model4_trial_rs <- glmer(correct_path ~ condition*group*accumulated_state1_visits + (1 + condition + accumulated_state1_visits | ID), data = logreg_test_path_group_condition_env_time_df_alcohol, family = "binomial", glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model4_trial, model4_trial_rs) -->

<!-- tab_model(model4_trial, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model4_trial_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ##### Model 5_trial: Full dataset, compare against reward revaluation -->

<!-- Change if it turns out that preregistered model without full version effects is optimal -->

<!-- ```{r} -->
<!-- contrasts(logreg_test_path_group_condition_env_time_df_alcohol$condition) <- contr.treatment(5, base = 1) -->

<!-- model5_trial <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits + (1 + condition | ID),  -->
<!--                 data = logreg_test_path_group_condition_env_time_df_alcohol,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- model5_trial_rs <- glmer(correct_path ~ group*version*condition*accumulated_state1_visits + (1 + condition + accumulated_state1_visits | ID),  -->
<!--                 data = logreg_test_path_group_condition_env_time_df_alcohol,  -->
<!--                 family = "binomial",  -->
<!--                 glmerControl(optimizer = "bobyqa", optCtrl=list(maxfun=1e6))) -->

<!-- anova(model5_trial, model5_trial_rs) -->

<!-- tab_model(model5_trial, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- tab_model(model5_trial_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ## Reaction times -->

<!-- ### RT in state 1 per condition -->

<!-- #### Plot -->

<!-- ```{r} -->
<!-- RT_state1_condition_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1)) %>% -->
<!--   group_by(group, version, condition) %>% -->
<!--   summarise(mean_RT = mean(RT), -->
<!--             se_RT = sd(RT, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(RT, na.rm=TRUE)[2], -->
<!--             ci_u = ci(RT, na.rm=TRUE)[3]) -->

<!-- RT_state1_condition_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 16, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- RT_state1_plotting_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1)) -->

<!-- ggplot(RT_state1_plotting_df, aes(x=condition, y=RT, fill = condition)) + -->
<!--   geom_boxplot() + -->
<!--   scale_y_continuous(labels = scales::comma) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   xlab("Phase") + -->
<!--   ylab("Reaction times") + -->
<!--   theme(legend.position = "none", -->
<!--         axis.title.x=element_blank(), -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis("Condition", option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Linear regression -->

<!-- ```{r} -->
<!-- linreg_test_state1_rt_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1 -->
<!--          ) %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(ID, -->
<!--          RT, -->
<!--          condition, -->
<!--          group, -->
<!--          version, -->
<!--          environment) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- rt_test_state1_model <- lmer(data = linreg_test_state1_rt_df,  -->
<!--                                  RT ~ group*version*condition + (1 | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- rt_test_state1_model_rs <- lmer(data = linreg_test_state1_rt_df,  -->
<!--                                  RT ~ group*version*condition + (1 + condition | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- anova(rt_test_state1_model, rt_test_state1_model_rs) -->

<!-- tab_model(rt_test_state1_model_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ### RT in all states per condition -->

<!-- #### Plot -->

<!-- ```{r} -->
<!-- RT_state1_condition_df <- trial_df %>% -->
<!--   filter(phase == "test") %>% -->
<!--   group_by(group, version, condition) %>% -->
<!--   summarise(mean_RT = mean(RT), -->
<!--             se_RT = sd(RT, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(RT, na.rm=TRUE)[2], -->
<!--             ci_u = ci(RT, na.rm=TRUE)[3]) -->

<!-- RT_state1_condition_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 16, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- RT_state1_plotting_df <- trial_df %>% -->
<!--   filter(phase == "test") -->

<!-- ggplot(RT_state1_plotting_df, aes(x=condition, y=RT, fill = condition)) + -->
<!--   geom_boxplot() + -->
<!--   scale_y_continuous(labels = scales::comma) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   ylab("Reaction times") + -->
<!--   theme(legend.position = "none", -->
<!--         axis.title.x=element_blank(), -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis("Condition", option = "viridis", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Linear regression -->

<!-- ```{r} -->
<!-- linreg_test_state123_rt_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1,2,3) -->
<!--          ) %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.factor(environment)) %>% -->
<!--   select(ID, -->
<!--          RT, -->
<!--          condition, -->
<!--          group, -->
<!--          version, -->
<!--          environment) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- rt_test_state123_model <- lmer(data = linreg_test_state123_rt_df,  -->
<!--                                  RT ~ group*version*condition + (1 | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- rt_test_state123_model_rs <- lmer(data = linreg_test_state123_rt_df,  -->
<!--                                  RT ~ group*version*condition + (1 + condition | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- anova(rt_test_state123_model, rt_test_state123_model_rs) -->

<!-- tab_model(rt_test_state123_model_rs, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ### RT in state 1 - correct choice -->

<!-- #### Plot -->

<!-- ```{r} -->
<!-- RT_state1_condition_phase_correct_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1)) %>% -->
<!--   group_by(group, version, condition, phase, correct) %>% -->
<!--   summarise(mean_RT = mean(RT), -->
<!--             se_RT = sd(RT, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(RT, na.rm=TRUE)[2], -->
<!--             ci_u = ci(RT, na.rm=TRUE)[3], -->
<!--             n = n()) -->

<!-- RT_state1_condition_phase_correct_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 16, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- RT_state1_correct_df <- trial_df %>% -->
<!--   mutate(correct = as.factor(correct)) %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1)) -->

<!-- ggplot(RT_state1_correct_df, aes(x=condition, y=RT, fill = correct)) + -->
<!--   geom_boxplot() + -->
<!--   scale_y_continuous(labels = scales::comma) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   ylab("Reaction times") + -->
<!--   theme(axis.title.x=element_blank(), -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis("Correct", option = "magma", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Linear regression -->

<!-- ```{r} -->
<!-- linreg_test_state1_rt_correct_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state == 1 -->
<!--          ) %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.factor(environment), -->
<!--          correct = as.factor(correct)) %>% -->
<!--   select(ID, -->
<!--          RT, -->
<!--          condition, -->
<!--          group, -->
<!--          version, -->
<!--          environment, -->
<!--          correct) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- rt_correct_test_state1_model <- lmer(data = linreg_test_state1_rt_correct_df,  -->
<!--                                  RT ~ group*version*condition*correct + (1 | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- rt_correct_test_state1_model_rs <- lmer(data = linreg_test_state1_rt_correct_df,  -->
<!--                                  RT ~ group*version*condition*correct + (1 + condition | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- rt_correct_test_state1_model_rs2 <- lmer(data = linreg_test_state1_rt_correct_df,  -->
<!--                                  RT ~ group*version*condition*correct + (1 + condition + correct | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- anova(rt_correct_test_state1_model, rt_correct_test_state1_model_rs, rt_correct_test_state1_model_rs2) -->

<!-- tab_model(rt_correct_learning_state1_model_rs2, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- ### RT in all states - correct choice -->

<!-- #### Plot -->

<!-- ```{r} -->
<!-- RT_state1_condition_phase_correct_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1,2,3)) %>% -->
<!--   group_by(group, version, condition, phase, correct) %>% -->
<!--   summarise(mean_RT = mean(RT), -->
<!--             se_RT = sd(RT, na.rm = TRUE)/sqrt(n()), -->
<!--             ci_l = ci(RT, na.rm=TRUE)[2], -->
<!--             ci_u = ci(RT, na.rm=TRUE)[3], -->
<!--             n = n()) -->

<!-- RT_state1_condition_phase_correct_df %>% -->
<!--   kable("html") %>% -->
<!--   kable_styling(font_size = 16, -->
<!--                 latex_options = "scale_down") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- RT_state1_correct_df <- trial_df %>% -->
<!--   mutate(correct = as.factor(correct)) %>% -->
<!--   filter(phase == "test", -->
<!--          state %in% c(1,2,3)) -->

<!-- ggplot(RT_state1_correct_df, aes(x=condition, y=RT, fill = correct)) + -->
<!--   geom_boxplot() + -->
<!--   scale_y_continuous(labels = scales::comma) + -->
<!--   facet_grid(vars(group), vars(version)) + -->
<!--   theme_light(base_size = 16) + -->
<!--   ylab("Reaction times") + -->
<!--   theme(axis.title.x=element_blank(), -->
<!--         axis.text.x = element_text(angle = 50, vjust = 1, hjust=1)) + -->
<!--   scale_fill_viridis("Correct", option = "magma", discrete = TRUE) -->
<!-- ``` -->

<!-- #### Linear regression -->

<!-- ```{r} -->
<!-- linreg_test_state123_rt_correct_df <- trial_df %>% -->
<!--   filter(phase == "test", -->
<!--          state%in% c(1,2,3) -->
<!--          ) %>% -->
<!--   mutate(condition = as.factor(condition), -->
<!--          group = as.factor(group), -->
<!--          version = as.factor(version), -->
<!--          environment = as.factor(environment), -->
<!--          correct = as.factor(correct)) %>% -->
<!--   select(ID, -->
<!--          RT, -->
<!--          condition, -->
<!--          group, -->
<!--          version, -->
<!--          environment, -->
<!--          correct) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- rt_correct_test_state123_model <- lmer(data = linreg_test_state123_rt_correct_df,  -->
<!--                                  RT ~ group*version*condition*correct + (1 | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- rt_correct_test_state123_model_rs <- lmer(data = linreg_test_state123_rt_correct_df,  -->
<!--                                  RT ~ group*version*condition*correct + (1 + condition | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- rt_correct_test_state123_model_rs2 <- lmer(data = linreg_test_state123_rt_correct_df,  -->
<!--                                  RT ~ group*version*condition*correct + (1 + condition + correct | ID),  -->
<!--                                  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=1e6)), -->
<!--                                  REML = FALSE) -->

<!-- anova(rt_correct_test_state123_model, rt_correct_test_state123_model_rs, rt_correct_test_state123_model_rs2) -->

<!-- tab_model(rt_correct_test_state123_model_rs2, show.est = T, show.stat = T, auto.label = FALSE, CSS = list(css.table = '+font-size: 14;')) -->
<!-- ``` -->

<!-- # Payment criterion -->

<!-- ```{r} -->
<!-- # payment_df <- trial_df %>% -->
<!-- #   group_by(group, version, ID) %>% -->
<!-- #   summarise(mean_correct = mean(correct, na.rm = TRUE)) -->
<!-- #  -->
<!-- # payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="alcohol version" & payment_df$group=="low-risk drinkers"]),] -->
<!-- #  -->
<!-- # payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="alcohol version" & payment_df$group=="harmful drinkers"]),] -->
<!-- #  -->
<!-- # payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="monetary version" & payment_df$group=="low-risk drinkers"]),] -->
<!-- #  -->
<!-- # payment_df[payment_df$mean_correct==max(payment_df$mean_correct[payment_df$version=="monetary version" & payment_df$group=="harmful drinkers"]),] -->
<!-- ``` -->
